
// pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.1</version>
        <relativePath/>
    </parent>
    <groupId>com.example</groupId>
    <artifactId>spring-data-jdbc-demo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>spring-data-jdbc-demo</name>
    <description>Demo project for Spring Data JDBC with Java Records</description>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

// src/main/java/com/example/springdatajdbcdemo/SpringDataJdbcDemoApplication.java
package com.example.springdatajdbcdemo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringDataJdbcDemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(SpringDataJdbcDemoApplication.class, args);
    }
}

// src/main/java/com/example/springdatajdbcdemo/entity/Book.java
package com.example.springdatajdbcdemo.entity;

import org.springframework.data.annotation.Id;
import org.springframework.data.relational.core.mapping.Table;

import java.math.BigDecimal;
import java.time.LocalDate;

@Table("books")
public record Book(
    @Id Long id,
    String title,
    String author,
    String isbn,
    BigDecimal price,
    LocalDate publishedDate,
    String genre
) {
    // Constructor for creating new books (without ID)
    public Book(String title, String author, String isbn, BigDecimal price, LocalDate publishedDate, String genre) {
        this(null, title, author, isbn, price, publishedDate, genre);
    }
}

// src/main/java/com/example/springdatajdbcdemo/entity/Author.java
package com.example.springdatajdbcdemo.entity;

import org.springframework.data.annotation.Id;
import org.springframework.data.relational.core.mapping.MappedCollection;
import org.springframework.data.relational.core.mapping.Table;

import java.time.LocalDate;
import java.util.Set;

@Table("authors")
public record Author(
    @Id Long id,
    String firstName,
    String lastName,
    String email,
    LocalDate birthDate,
    @MappedCollection(idColumn = "author_id")
    Set<Book> books
) {
    // Constructor for creating new authors (without ID and books)
    public Author(String firstName, String lastName, String email, LocalDate birthDate) {
        this(null, firstName, lastName, email, birthDate, Set.of());
    }
}

// src/main/java/com/example/springdatajdbcdemo/repository/BookRepository.java
package com.example.springdatajdbcdemo.repository;

import com.example.springdatajdbcdemo.entity.Book;
import org.springframework.data.jdbc.repository.query.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.util.List;

@Repository
public interface BookRepository extends CrudRepository<Book, Long> {
    
    List<Book> findByAuthor(String author);
    
    List<Book> findByGenre(String genre);
    
    List<Book> findByTitleContainingIgnoreCase(String title);
    
    @Query("SELECT * FROM books WHERE price BETWEEN :minPrice AND :maxPrice")
    List<Book> findByPriceRange(@Param("minPrice") BigDecimal minPrice, @Param("maxPrice") BigDecimal maxPrice);
    
    @Query("SELECT * FROM books WHERE author = :author AND genre = :genre")
    List<Book> findByAuthorAndGenre(@Param("author") String author, @Param("genre") String genre);
}

// src/main/java/com/example/springdatajdbcdemo/repository/AuthorRepository.java
package com.example.springdatajdbcdemo.repository;

import com.example.springdatajdbcdemo.entity.Author;
import org.springframework.data.jdbc.repository.query.Query;
import org.springframework.data.repository.CrudRepository;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface AuthorRepository extends CrudRepository<Author, Long> {
    
    Optional<Author> findByEmail(String email);
    
    List<Author> findByLastName(String lastName);
    
    @Query("SELECT * FROM authors WHERE first_name = :firstName AND last_name = :lastName")
    List<Author> findByFullName(@Param("firstName") String firstName, @Param("lastName") String lastName);
}

// src/main/java/com/example/springdatajdbcdemo/service/BookService.java
package com.example.springdatajdbcdemo.service;

import com.example.springdatajdbcdemo.entity.Book;
import com.example.springdatajdbcdemo.repository.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

@Service
public class BookService {
    
    private final BookRepository bookRepository;
    
    @Autowired
    public BookService(BookRepository bookRepository) {
        this.bookRepository = bookRepository;
    }
    
    public Book saveBook(Book book) {
        return bookRepository.save(book);
    }
    
    public Optional<Book> findById(Long id) {
        return bookRepository.findById(id);
    }
    
    public List<Book> findAllBooks() {
        return (List<Book>) bookRepository.findAll();
    }
    
    public List<Book> findByAuthor(String author) {
        return bookRepository.findByAuthor(author);
    }
    
    public List<Book> findByGenre(String genre) {
        return bookRepository.findByGenre(genre);
    }
    
    public List<Book> searchByTitle(String title) {
        return bookRepository.findByTitleContainingIgnoreCase(title);
    }
    
    public List<Book> findByPriceRange(BigDecimal minPrice, BigDecimal maxPrice) {
        return bookRepository.findByPriceRange(minPrice, maxPrice);
    }
    
    public void deleteBook(Long id) {
        bookRepository.deleteById(id);
    }
    
    public Book updateBook(Book book) {
        return bookRepository.save(book);
    }
}

// src/main/java/com/example/springdatajdbcdemo/controller/BookController.java
package com.example.springdatajdbcdemo.controller;

import com.example.springdatajdbcdemo.entity.Book;
import com.example.springdatajdbcdemo.service.BookService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/books")
public class BookController {
    
    private final BookService bookService;
    
    @Autowired
    public BookController(BookService bookService) {
        this.bookService = bookService;
    }
    
    @PostMapping
    public ResponseEntity<Book> createBook(@RequestBody Book book) {
        Book savedBook = bookService.saveBook(book);
        return new ResponseEntity<>(savedBook, HttpStatus.CREATED);
    }
    
    @GetMapping
    public ResponseEntity<List<Book>> getAllBooks() {
        List<Book> books = bookService.findAllBooks();
        return ResponseEntity.ok(books);
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<Book> getBookById(@PathVariable Long id) {
        Optional<Book> book = bookService.findById(id);
        return book.map(ResponseEntity::ok)
                  .orElse(ResponseEntity.notFound().build());
    }
    
    @GetMapping("/author/{author}")
    public ResponseEntity<List<Book>> getBooksByAuthor(@PathVariable String author) {
        List<Book> books = bookService.findByAuthor(author);
        return ResponseEntity.ok(books);
    }
    
    @GetMapping("/genre/{genre}")
    public ResponseEntity<List<Book>> getBooksByGenre(@PathVariable String genre) {
        List<Book> books = bookService.findByGenre(genre);
        return ResponseEntity.ok(books);
    }
    
    @GetMapping("/search")
    public ResponseEntity<List<Book>> searchBooks(@RequestParam String title) {
        List<Book> books = bookService.searchByTitle(title);
        return ResponseEntity.ok(books);
    }
    
    @GetMapping("/price-range")
    public ResponseEntity<List<Book>> getBooksByPriceRange(
            @RequestParam BigDecimal minPrice,
            @RequestParam BigDecimal maxPrice) {
        List<Book> books = bookService.findByPriceRange(minPrice, maxPrice);
        return ResponseEntity.ok(books);
    }
    
    @PutMapping("/{id}")
    public ResponseEntity<Book> updateBook(@PathVariable Long id, @RequestBody Book book) {
        if (!bookService.findById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        Book updatedBook = new Book(id, book.title(), book.author(), book.isbn(), 
                                   book.price(), book.publishedDate(), book.genre());
        Book savedBook = bookService.updateBook(updatedBook);
        return ResponseEntity.ok(savedBook);
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteBook(@PathVariable Long id) {
        if (!bookService.findById(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        bookService.deleteBook(id);
        return ResponseEntity.noContent().build();
    }
}

// src/main/java/com/example/springdatajdbcdemo/config/DataInitializer.java
package com.example.springdatajdbcdemo.config;

import com.example.springdatajdbcdemo.entity.Book;
import com.example.springdatajdbcdemo.service.BookService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.time.LocalDate;

@Component
public class DataInitializer implements CommandLineRunner {
    
    private final BookService bookService;
    
    @Autowired
    public DataInitializer(BookService bookService) {
        this.bookService = bookService;
    }
    
    @Override
    public void run(String... args) throws Exception {
        // Initialize some sample data
        Book book1 = new Book("The Great Gatsby", "F. Scott Fitzgerald", "978-0-7432-7356-5", 
                             new BigDecimal("12.99"), LocalDate.of(1925, 4, 10), "Fiction");
        
        Book book2 = new Book("To Kill a Mockingbird", "Harper Lee", "978-0-06-112008-4", 
                             new BigDecimal("14.99"), LocalDate.of(1960, 7, 11), "Fiction");
        
        Book book3 = new Book("1984", "George Orwell", "978-0-452-28423-4", 
                             new BigDecimal("13.99"), LocalDate.of(1949, 6, 8), "Dystopian Fiction");
        
        Book book4 = new Book("Clean Code", "Robert C. Martin", "978-0-13-235088-4", 
                             new BigDecimal("45.99"), LocalDate.of(2008, 8, 1), "Programming");
        
        bookService.saveBook(book1);
        bookService.saveBook(book2);
        bookService.saveBook(book3);
        bookService.saveBook(book4);
        
        System.out.println("Sample data initialized!");
    }
}

// src/main/resources/application.yml
spring:
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password: 
  h2:
    console:
      enabled: true
      path: /h2-console
  sql:
    init:
      mode: always
  jpa:
    show-sql: true
    defer-datasource-initialization: true

logging:
  level:
    org.springframework.jdbc.core: DEBUG

# src/main/resources/schema.sql
DROP TABLE IF EXISTS books;
DROP TABLE IF EXISTS authors;

CREATE TABLE authors (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE,
    birth_date DATE
);

CREATE TABLE books (
    id BIGINT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author VARCHAR(255) NOT NULL,
    isbn VARCHAR(20) UNIQUE,
    price DECIMAL(10,2),
    published_date DATE,
    genre VARCHAR(100),
    author_id BIGINT,
    FOREIGN KEY (author_id) REFERENCES authors(id)
);

// src/test/java/com/example/springdatajdbcdemo/repository/BookRepositoryTest.java
package com.example.springdatajdbcdemo.repository;

import com.example.springdatajdbcdemo.entity.Book;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.jdbc.DataJdbcTest;
import org.springframework.test.context.jdbc.Sql;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;

@DataJdbcTest
@Sql("/test-data.sql")
class BookRepositoryTest {
    
    @Autowired
    private BookRepository bookRepository;
    
    @Test
    void testSaveAndFindById() {
        Book book = new Book("Test Book", "Test Author", "123-456-789", 
                            new BigDecimal("19.99"), LocalDate.now(), "Test Genre");
        
        Book savedBook = bookRepository.save(book);
        assertThat(savedBook.id()).isNotNull();
        
        Optional<Book> foundBook = bookRepository.findById(savedBook.id());
        assertThat(foundBook).isPresent();
        assertThat(foundBook.get().title()).isEqualTo("Test Book");
    }
    
    @Test
    void testFindByAuthor() {
        List<Book> books = bookRepository.findByAuthor("George Orwell");
        assertThat(books).hasSize(1);
        assertThat(books.get(0).title()).isEqualTo("1984");
    }
    
    @Test
    void testFindByGenre() {
        List<Book> books = bookRepository.findByGenre("Fiction");
        assertThat(books).hasSizeGreaterThan(0);
    }
    
    @Test
    void testFindByPriceRange() {
        List<Book> books = bookRepository.findByPriceRange(
            new BigDecimal("10.00"), new BigDecimal("20.00"));
        assertThat(books).hasSizeGreaterThan(0);
    }
}

// src/test/resources/test-data.sql
INSERT INTO books (title, author, isbn, price, published_date, genre) VALUES
('1984', 'George Orwell', '978-0-452-28423-4', 13.99, '1949-06-08', 'Dystopian Fiction'),
('The Great Gatsby', 'F. Scott Fitzgerald', '978-0-7432-7356-5', 12.99, '1925-04-10', 'Fiction');

// README.md
# Spring Data JDBC Demo with Java Records

This project demonstrates how to use Spring Data JDBC with Java Records as entities.

## Features

- Java Records as JPA entities
- Spring Data JDBC repositories
- Custom query methods
- REST API controllers
- H2 in-memory database
- Unit tests

## Key Components

### Entities
- `Book` - Main entity using Java Record
- `Author` - Entity with one-to-many relationship

### Repositories
- `BookRepository` - CRUD operations and custom queries
- `AuthorRepository` - Author-specific operations

### Key Annotations
- `@Table` - Maps record to database table
- `@Id` - Marks the primary key field
- `@MappedCollection` - Maps related entities

## Running the Application

1. Clone the project
2. Run: `mvn spring-boot:run`
3. Access H2 Console: http://localhost:8080/h2-console
4. Test APIs: http://localhost:8080/api/books

## API Endpoints

- `GET /api/books` - Get all books
- `POST /api/books` - Create a new book
- `GET /api/books/{id}` - Get book by ID
- `GET /api/books/author/{author}` - Get books by author
- `GET /api/books/genre/{genre}` - Get books by genre
- `GET /api/books/search?title={title}` - Search books by title
- `PUT /api/books/{id}` - Update book
- `DELETE /api/books/{id}` - Delete book

## Benefits of Using Records with Spring Data JDBC

1. **Immutability** - Records are immutable by default
2. **Concise Code** - Less boilerplate compared to regular classes
3. **Type Safety** - Compile-time safety with strong typing
4. **Pattern Matching** - Better support for pattern matching (Java 17+)
5. **Automatic Methods** - toString(), equals(), hashCode() generated automatically
