// Main Application Class
package com.example.springutilsdemo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ConfigurableApplicationContext;

@SpringBootApplication
public class SpringUtilsDemoApplication {
    public static void main(String[] args) {
        ConfigurableApplicationContext context = SpringApplication.run(SpringUtilsDemoApplication.class, args);
        
        // Run all demos
        StringUtilsDemo stringDemo = context.getBean(StringUtilsDemo.class);
        ReflectionUtilsDemo reflectionDemo = context.getBean(ReflectionUtilsDemo.class);
        CollectionUtilsDemo collectionDemo = context.getBean(CollectionUtilsDemo.class);
        FileSystemUtilsDemo fileDemo = context.getBean(FileSystemUtilsDemo.class);
        ResourceUtilsDemo resourceDemo = context.getBean(ResourceUtilsDemo.class);
        ClassUtilsDemo classDemo = context.getBean(ClassUtilsDemo.class);
        
        System.out.println("=== SPRING FRAMEWORK UTILITIES DEMO ===\n");
        
        stringDemo.demonstrateStringUtils();
        reflectionDemo.demonstrateReflectionUtils();
        collectionDemo.demonstrateCollectionUtils();
        fileDemo.demonstrateFileSystemUtils();
        resourceDemo.demonstrateResourceUtils();
        classDemo.demonstrateClassUtils();
    }
}

// String Utilities Demo
package com.example.springutilsdemo;

import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

@Component
public class StringUtilsDemo {
    
    public void demonstrateStringUtils() {
        System.out.println("=== STRING UTILITIES DEMO ===");
        
        // Basic string checks
        String text = "  Hello World  ";
        String empty = "";
        String nullStr = null;
        
        System.out.println("1. Basic String Checks:");
        System.out.println("   hasText('" + text + "'): " + StringUtils.hasText(text));
        System.out.println("   hasText('" + empty + "'): " + StringUtils.hasText(empty));
        System.out.println("   hasText(null): " + StringUtils.hasText(nullStr));
        System.out.println("   hasLength('" + text + "'): " + StringUtils.hasLength(text));
        System.out.println("   isEmpty('" + empty + "'): " + StringUtils.isEmpty(empty));
        
        // String trimming and cleaning
        System.out.println("\n2. String Trimming:");
        System.out.println("   Original: '" + text + "'");
        System.out.println("   trimWhitespace(): '" + StringUtils.trimWhitespace(text) + "'");
        System.out.println("   trimAllWhitespace(): '" + StringUtils.trimAllWhitespace(text) + "'");
        System.out.println("   trimLeadingWhitespace(): '" + StringUtils.trimLeadingWhitespace(text) + "'");
        System.out.println("   trimTrailingWhitespace(): '" + StringUtils.trimTrailingWhitespace(text) + "'");
        
        // String manipulation
        System.out.println("\n3. String Manipulation:");
        String path = "/home/user/documents/file.txt";
        System.out.println("   Path: " + path);
        System.out.println("   getFilename(): " + StringUtils.getFilename(path));
        System.out.println("   getFilenameExtension(): " + StringUtils.getFilenameExtension(path));
        System.out.println("   stripFilenameExtension(): " + StringUtils.stripFilenameExtension(path));
        
        // String arrays
        System.out.println("\n4. String Arrays:");
        String[] array = {"apple", "banana", "cherry"};
        System.out.println("   Array: " + java.util.Arrays.toString(array));
        System.out.println("   arrayToCommaDelimitedString(): " + StringUtils.arrayToCommaDelimitedString(array));
        System.out.println("   arrayToDelimitedString(' | '): " + StringUtils.arrayToDelimitedString(array, " | "));
        
        String delimited = "red,green,blue";
        System.out.println("   Delimited: " + delimited);
        System.out.println("   commaDelimitedListToStringArray(): " + 
            java.util.Arrays.toString(StringUtils.commaDelimitedListToStringArray(delimited)));
        
        // String matching
        System.out.println("\n5. String Matching:");
        String pattern = "*.txt";
        String filename = "document.txt";
        System.out.println("   Pattern: " + pattern + ", Filename: " + filename);
        System.out.println("   simpleMatch(): " + StringUtils.simpleMatch(pattern, filename));
        
        System.out.println("\n" + "=".repeat(50) + "\n");
    }
}

// Reflection Utilities Demo
package com.example.springutilsdemo;

import org.springframework.stereotype.Component;
import org.springframework.util.ReflectionUtils;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

@Component
public class ReflectionUtilsDemo {
    
    private String privateField = "Secret Value";
    public String publicField = "Public Value";
    
    public void demonstrateReflectionUtils() {
        System.out.println("=== REFLECTION UTILITIES DEMO ===");
        
        // Field access
        System.out.println("1. Field Access:");
        Field privateField = ReflectionUtils.findField(this.getClass(), "privateField");
        Field publicField = ReflectionUtils.findField(this.getClass(), "publicField");
        
        if (privateField != null) {
            ReflectionUtils.makeAccessible(privateField);
            Object value = ReflectionUtils.getField(privateField, this);
            System.out.println("   Private field value: " + value);
        }
        
        if (publicField != null) {
            Object value = ReflectionUtils.getField(publicField, this);
            System.out.println("   Public field value: " + value);
        }
        
        // Method invocation
        System.out.println("\n2. Method Invocation:");
        Method method = ReflectionUtils.findMethod(this.getClass(), "sampleMethod", String.class);
        if (method != null) {
            Object result = ReflectionUtils.invokeMethod(method, this, "Hello from Reflection!");
            System.out.println("   Method result: " + result);
        }
        
        // Field manipulation
        System.out.println("\n3. Field Manipulation:");
        ReflectionUtils.doWithFields(this.getClass(), field -> {
            System.out.println("   Found field: " + field.getName() + " (type: " + field.getType().getSimpleName() + ")");
        });
        
        // Method manipulation
        System.out.println("\n4. Method Manipulation:");
        ReflectionUtils.doWithMethods(this.getClass(), method -> {
            if (method.getName().startsWith("sample")) {
                System.out.println("   Found sample method: " + method.getName());
            }
        });
        
        System.out.println("\n" + "=".repeat(50) + "\n");
    }
    
    public String sampleMethod(String input) {
        return "Processed: " + input;
    }
    
    private void privateSampleMethod() {
        System.out.println("Private method called");
    }
}

// Collection Utilities Demo
package com.example.springutilsdemo;

import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;
import java.util.*;

@Component
public class CollectionUtilsDemo {
    
    public void demonstrateCollectionUtils() {
        System.out.println("=== COLLECTION UTILITIES DEMO ===");
        
        // Basic collection checks
        List<String> list = Arrays.asList("apple", "banana", "cherry");
        List<String> emptyList = new ArrayList<>();
        Map<String, Integer> map = new HashMap<>();
        map.put("one", 1);
        map.put("two", 2);
        
        System.out.println("1. Basic Collection Checks:");
        System.out.println("   isEmpty(list): " + CollectionUtils.isEmpty(list));
        System.out.println("   isEmpty(emptyList): " + CollectionUtils.isEmpty(emptyList));
        System.out.println("   isEmpty(map): " + CollectionUtils.isEmpty(map));
        
        // Array to List conversion
        System.out.println("\n2. Array to List Conversion:");
        String[] array = {"red", "green", "blue"};
        List<String> arrayList = CollectionUtils.arrayToList(array);
        System.out.println("   Array: " + Arrays.toString(array));
        System.out.println("   As List: " + arrayList);
        
        // Merging arrays
        System.out.println("\n3. Merging Arrays:");
        String[] array1 = {"a", "b"};
        String[] array2 = {"c", "d"};
        Object[] merged = CollectionUtils.mergeArrayIntoCollection(array1, new ArrayList<>()).toArray();
        System.out.println("   Array1: " + Arrays.toString(array1));
        System.out.println("   Array2: " + Arrays.toString(array2));
        System.out.println("   Merged: " + Arrays.toString(merged));
        
        // Map merging
        System.out.println("\n4. Map Operations:");
        Map<String, Integer> map1 = new HashMap<>();
        map1.put("a", 1);
        map1.put("b", 2);
        
        Map<String, Integer> map2 = new HashMap<>();
        map2.put("c", 3);
        map2.put("d", 4);
        
        Map<String, Integer> mergedMap = new HashMap<>(map1);
        CollectionUtils.mergeArrayIntoCollection(map2.entrySet().toArray(), new ArrayList<>());
        System.out.println("   Map1: " + map1);
        System.out.println("   Map2: " + map2);
        
        // Contains operations
        System.out.println("\n5. Contains Operations:");
        System.out.println("   List contains 'apple': " + list.contains("apple"));
        System.out.println("   containsInstance (same reference): " + 
            CollectionUtils.containsInstance(list, "apple"));
        
        System.out.println("\n" + "=".repeat(50) + "\n");
    }
}

// File System Utilities Demo
package com.example.springutilsdemo;

import org.springframework.stereotype.Component;
import org.springframework.util.FileSystemUtils;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

@Component
public class FileSystemUtilsDemo {
    
    public void demonstrateFileSystemUtils() {
        System.out.println("=== FILE SYSTEM UTILITIES DEMO ===");
        
        try {
            // Create temporary directory for demo
            Path tempDir = Files.createTempDirectory("spring-demo");
            Path subDir = tempDir.resolve("subdir");
            Files.createDirectory(subDir);
            
            // Create some test files
            Path file1 = tempDir.resolve("test1.txt");
            Path file2 = subDir.resolve("test2.txt");
            Files.write(file1, "Hello World".getBytes());
            Files.write(file2, "Nested File".getBytes());
            
            System.out.println("1. Directory Operations:");
            System.out.println("   Created temp directory: " + tempDir);
            System.out.println("   Directory exists: " + Files.exists(tempDir));
            System.out.println("   Is directory: " + Files.isDirectory(tempDir));
            
            // Copy directory recursively
            Path copyDir = Paths.get(tempDir.getParent().toString(), "spring-demo-copy");
            FileSystemUtils.copyRecursively(tempDir.toFile(), copyDir.toFile());
            System.out.println("   Copied directory to: " + copyDir);
            System.out.println("   Copy exists: " + Files.exists(copyDir));
            
            // List directory contents
            System.out.println("\n2. Directory Contents:");
            Files.walk(tempDir)
                .forEach(path -> System.out.println("   " + path));
            
            // Delete directory recursively
            System.out.println("\n3. Cleanup:");
            boolean deleted1 = FileSystemUtils.deleteRecursively(tempDir.toFile());
            boolean deleted2 = FileSystemUtils.deleteRecursively(copyDir.toFile());
            System.out.println("   Original directory deleted: " + deleted1);
            System.out.println("   Copy directory deleted: " + deleted2);
            
        } catch (IOException e) {
            System.err.println("   Error during file operations: " + e.getMessage());
        }
        
        System.out.println("\n" + "=".repeat(50) + "\n");
    }
}

// Resource Utilities Demo
package com.example.springutilsdemo;

import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Component;
import org.springframework.util.ResourceUtils;
import java.io.File;
import java.io.IOException;
import java.net.URL;

@Component
public class ResourceUtilsDemo {
    
    public void demonstrateResourceUtils() {
        System.out.println("=== RESOURCE UTILITIES DEMO ===");
        
        try {
            // URL operations
            System.out.println("1. URL Operations:");
            String fileUrl = "file:///tmp/test.txt";
            String classpathUrl = "classpath:application.properties";
            
            System.out.println("   File URL: " + fileUrl);
            System.out.println("   isFileURL(): " + ResourceUtils.isFileURL(new URL(fileUrl)));
            System.out.println("   isJarURL(): " + ResourceUtils.isJarURL(new URL(fileUrl)));
            
            // URL to File conversion
            System.out.println("\n2. URL to File Conversion:");
            try {
                File file = ResourceUtils.getFile(fileUrl);
                System.out.println("   File path: " + file.getPath());
            } catch (Exception e) {
                System.out.println("   File not found (expected for demo): " + e.getMessage());
            }
            
            // Classpath resource
            System.out.println("\n3. Classpath Resources:");
            try {
                URL resource = ResourceUtils.getURL("classpath:application.properties");
                System.out.println("   Classpath resource URL: " + resource);
            } catch (Exception e) {
                System.out.println("   Classpath resource not found: " + e.getMessage());
            }
            
            // Extract jar file URL
            System.out.println("\n4. JAR URL Operations:");
            String jarUrl = "jar:file:/path/to/app.jar!/BOOT-INF/classes/application.properties";
            System.out.println("   JAR URL: " + jarUrl);
            try {
                URL jarFileUrl = ResourceUtils.extractJarFileURL(new URL(jarUrl));
                System.out.println("   Extracted JAR file URL: " + jarFileUrl);
            } catch (Exception e) {
                System.out.println("   JAR URL extraction failed: " + e.getMessage());
            }
            
        } catch (Exception e) {
            System.err.println("   Error during resource operations: " + e.getMessage());
        }
        
        System.out.println("\n" + "=".repeat(50) + "\n");
    }
}

// Class Utilities Demo
package com.example.springutilsdemo;

import org.springframework.stereotype.Component;
import org.springframework.util.ClassUtils;
import java.util.List;
import java.util.Map;

@Component
public class ClassUtilsDemo {
    
    public void demonstrateClassUtils() {
        System.out.println("=== CLASS UTILITIES DEMO ===");
        
        // Class name operations
        System.out.println("1. Class Name Operations:");
        Class<?> clazz = String.class;
        System.out.println("   Class: " + clazz.getName());
        System.out.println("   Short name: " + ClassUtils.getShortName(clazz));
        System.out.println("   Short name (String): " + ClassUtils.getShortName(clazz.getName()));
        System.out.println("   Qualified name: " + ClassUtils.getQualifiedName(clazz));
        
        // Package operations
        System.out.println("\n2. Package Operations:");
        System.out.println("   Package name: " + ClassUtils.getPackageName(clazz));
        System.out.println("   Package name (String): " + ClassUtils.getPackageName(clazz.getName()));
        
        // Class loading
        System.out.println("\n3. Class Loading:");
        try {
            Class<?> loadedClass = ClassUtils.forName("java.util.ArrayList", getClass().getClassLoader());
            System.out.println("   Loaded class: " + loadedClass.getName());
            System.out.println("   Is assignable from List: " + 
                ClassUtils.isAssignable(List.class, loadedClass));
        } catch (Exception e) {
            System.err.println("   Class loading error: " + e.getMessage());
        }
        
        // Primitive operations
        System.out.println("\n4. Primitive Operations:");
        Class<?> intClass = int.class;
        Class<?> integerClass = Integer.class;
        System.out.println("   int.class is primitive: " + intClass.isPrimitive());
        System.out.println("   Integer.class is primitive: " + integerClass.isPrimitive());
        System.out.println("   Primitive wrapper for int: " + ClassUtils.resolvePrimitiveWrapper(intClass));
        
        // Method and constructor checks
        System.out.println("\n5. Method and Constructor Checks:");
        System.out.println("   String has constructor: " + ClassUtils.hasConstructor(String.class));
        System.out.println("   String has method 'length': " + ClassUtils.hasMethod(String.class, "length"));
        System.out.println("   String has method 'nonExistent': " + ClassUtils.hasMethod(String.class, "nonExistent"));
        
        // Interface checks
        System.out.println("\n6. Interface Checks:");
        System.out.println("   String implements CharSequence: " + 
            ClassUtils.isAssignable(CharSequence.class, String.class));
        System.out.println("   ArrayList implements List: " + 
            ClassUtils.isAssignable(List.class, java.util.ArrayList.class));
        
        System.out.println("\n" + "=".repeat(50) + "\n");
    }
}

// Maven Dependencies (pom.xml)
/*
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>com.example</groupId>
    <artifactId>spring-utils-demo</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.0</version>
        <relativePath/>
    </parent>
    
    <properties>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <java.version>17</java.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
*/

// Application Properties (application.properties)
/*
# Application Configuration
spring.application.name=Spring Utils Demo
logging.level.com.example.springutilsdemo=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n
*/

/*
I'll create a comprehensive Spring Framework utilities demo application that showcases various useful utility classes. This will be a complete Spring Boot application with examples of different utility categories.I've created a comprehensive Spring Framework utilities demo application that showcases the most useful utility classes from Spring. Here's what the application demonstrates:

## **Key Spring Utility Classes Demonstrated:**

### 1. **StringUtils** - String manipulation and validation
- Text presence checks (`hasText`, `hasLength`, `isEmpty`)
- Whitespace trimming operations
- File path operations (filename extraction, extensions)
- String array conversions and delimiting
- Pattern matching

### 2. **ReflectionUtils** - Safe reflection operations
- Field access and manipulation (including private fields)
- Method invocation
- Field and method iteration with callbacks
- Making private members accessible

### 3. **CollectionUtils** - Collection operations
- Empty collection checks
- Array to collection conversions
- Collection merging operations
- Instance checking

### 4. **FileSystemUtils** - File system operations
- Recursive directory copying
- Recursive directory deletion
- Safe file operations

### 5. **ResourceUtils** - Resource handling
- URL type checking (file, JAR)
- URL to File conversion
- Classpath resource access
- JAR URL extraction

### 6. **ClassUtils** - Class manipulation and introspection
- Class name operations (short names, qualified names)
- Package name extraction
- Safe class loading
- Primitive type operations
- Interface and inheritance checking
- Method and constructor existence checks

## **Running the Application:**

1. **Set up the project structure:**
   ```
   src/main/java/com/example/springutilsdemo/
   ├── SpringUtilsDemoApplication.java
   ├── StringUtilsDemo.java
   ├── ReflectionUtilsDemo.java
   ├── CollectionUtilsDemo.java
   ├── FileSystemUtilsDemo.java
   ├── ResourceUtilsDemo.java
   └── ClassUtilsDemo.java
   ```

2. **Add the Maven dependencies** (pom.xml is included in the code)

3. **Run the application:**
   ```bash
   mvn spring-boot:run
   ```

## **Key Features:**

- **Comprehensive Coverage**: Demonstrates the most commonly used Spring utility classes
- **Practical Examples**: Real-world usage scenarios for each utility
- **Safe Operations**: Shows how Spring utilities provide safe alternatives to raw Java operations
- **Error Handling**: Includes proper exception handling
- **Educational Output**: Clear console output explaining each operation

The application will run all demos sequentially, showing practical examples of how these Spring utilities can simplify common programming tasks like string manipulation, reflection, file operations, and class introspection. Each utility class addresses common pain points in Java development with more robust, null-safe implementations.
*/
