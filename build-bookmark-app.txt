// pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/>
    </parent>
    
    <groupId>com.example</groupId>
    <artifactId>bookmark-manager</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>bookmark-manager</name>
    <description>Bookmark Manager Application</description>
    
    <properties>
        <java.version>17</java.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>gg.jte</groupId>
            <artifactId>jte-spring-boot-starter-3</artifactId>
            <version>3.1.9</version>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

// src/main/java/com/example/bookmarkmanager/BookmarkManagerApplication.java
package com.example.bookmarkmanager;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BookmarkManagerApplication {
    public static void main(String[] args) {
        SpringApplication.run(BookmarkManagerApplication.class, args);
    }
}

// src/main/java/com/example/bookmarkmanager/model/Bookmark.java
package com.example.bookmarkmanager.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;

@Entity
@Table(name = "bookmarks")
public class Bookmark {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @NotBlank(message = "Title is required")
    @Column(nullable = false)
    private String title;
    
    @NotBlank(message = "URL is required")
    @Pattern(regexp = "^https?://.*", message = "URL must start with http:// or https://")
    @Column(nullable = false, length = 2048)
    private String url;
    
    @Column(length = 1000)
    private String comment;
    
    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;
    
    @UpdateTimestamp
    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;
    
    // Constructors
    public Bookmark() {}
    
    public Bookmark(String title, String url, String comment) {
        this.title = title;
        this.url = url;
        this.comment = comment;
    }
    
    // Getters and Setters
    public Long getId() {
        return id;
    }
    
    public void setId(Long id) {
        this.id = id;
    }
    
    public String getTitle() {
        return title;
    }
    
    public void setTitle(String title) {
        this.title = title;
    }
    
    public String getUrl() {
        return url;
    }
    
    public void setUrl(String url) {
        this.url = url;
    }
    
    public String getComment() {
        return comment;
    }
    
    public void setComment(String comment) {
        this.comment = comment;
    }
    
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }
    
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }
    
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }
    
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }
}

// src/main/java/com/example/bookmarkmanager/repository/BookmarkRepository.java
package com.example.bookmarkmanager.repository;

import com.example.bookmarkmanager.model.Bookmark;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface BookmarkRepository extends JpaRepository<Bookmark, Long> {
    List<Bookmark> findAllByOrderByCreatedAtDesc();
    
    @Query("SELECT b FROM Bookmark b WHERE " +
           "LOWER(b.title) LIKE LOWER(CONCAT('%', :search, '%')) OR " +
           "LOWER(b.url) LIKE LOWER(CONCAT('%', :search, '%')) OR " +
           "LOWER(b.comment) LIKE LOWER(CONCAT('%', :search, '%')) " +
           "ORDER BY b.createdAt DESC")
    List<Bookmark> findBySearchTerm(@Param("search") String search);
}

// src/main/java/com/example/bookmarkmanager/service/BookmarkService.java
package com.example.bookmarkmanager.service;

import com.example.bookmarkmanager.model.Bookmark;
import com.example.bookmarkmanager.repository.BookmarkRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class BookmarkService {
    
    @Autowired
    private BookmarkRepository bookmarkRepository;
    
    public List<Bookmark> getAllBookmarks() {
        return bookmarkRepository.findAllByOrderByCreatedAtDesc();
    }
    
    public List<Bookmark> searchBookmarks(String searchTerm) {
        if (searchTerm == null || searchTerm.trim().isEmpty()) {
            return getAllBookmarks();
        }
        return bookmarkRepository.findBySearchTerm(searchTerm.trim());
    }
    
    public Optional<Bookmark> getBookmarkById(Long id) {
        return bookmarkRepository.findById(id);
    }
    
    public Bookmark saveBookmark(Bookmark bookmark) {
        return bookmarkRepository.save(bookmark);
    }
    
    public void deleteBookmark(Long id) {
        bookmarkRepository.deleteById(id);
    }
    
    public boolean existsById(Long id) {
        return bookmarkRepository.existsById(id);
    }
}

// src/main/java/com/example/bookmarkmanager/controller/BookmarkController.java
package com.example.bookmarkmanager.controller;

import com.example.bookmarkmanager.model.Bookmark;
import com.example.bookmarkmanager.service.BookmarkService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
public class BookmarkController {
    
    @Autowired
    private BookmarkService bookmarkService;
    
    @GetMapping("/")
    public String index(Model model, @RequestParam(required = false) String search) {
        List<Bookmark> bookmarks;
        if (search != null && !search.trim().isEmpty()) {
            bookmarks = bookmarkService.searchBookmarks(search);
        } else {
            bookmarks = bookmarkService.getAllBookmarks();
        }
        
        model.addAttribute("bookmarks", bookmarks);
        model.addAttribute("search", search);
        model.addAttribute("bookmark", new Bookmark());
        return "index";
    }
    
    @PostMapping("/bookmarks")
    public String addBookmark(@Valid @ModelAttribute Bookmark bookmark, 
                             BindingResult bindingResult, Model model) {
        if (bindingResult.hasErrors()) {
            model.addAttribute("bookmarks", bookmarkService.getAllBookmarks());
            model.addAttribute("errors", bindingResult.getAllErrors());
            return "fragments/bookmark-form";
        }
        
        bookmarkService.saveBookmark(bookmark);
        model.addAttribute("bookmarks", bookmarkService.getAllBookmarks());
        return "fragments/bookmark-list";
    }
    
    @GetMapping("/bookmarks/{id}/edit")
    public String editBookmark(@PathVariable Long id, Model model) {
        return bookmarkService.getBookmarkById(id)
            .map(bookmark -> {
                model.addAttribute("bookmark", bookmark);
                return "fragments/edit-form";
            })
            .orElse("redirect:/");
    }
    
    @PutMapping("/bookmarks/{id}")
    public String updateBookmark(@PathVariable Long id, 
                               @Valid @ModelAttribute Bookmark bookmark,
                               BindingResult bindingResult, Model model) {
        if (bindingResult.hasErrors()) {
            model.addAttribute("bookmark", bookmark);
            model.addAttribute("errors", bindingResult.getAllErrors());
            return "fragments/edit-form";
        }
        
        bookmark.setId(id);
        bookmarkService.saveBookmark(bookmark);
        model.addAttribute("bookmarks", bookmarkService.getAllBookmarks());
        return "fragments/bookmark-list";
    }
    
    @DeleteMapping("/bookmarks/{id}")
    public String deleteBookmark(@PathVariable Long id, Model model) {
        bookmarkService.deleteBookmark(id);
        model.addAttribute("bookmarks", bookmarkService.getAllBookmarks());
        return "fragments/bookmark-list";
    }
    
    @GetMapping("/search")
    public String searchBookmarks(@RequestParam String search, Model model) {
        List<Bookmark> bookmarks = bookmarkService.searchBookmarks(search);
        model.addAttribute("bookmarks", bookmarks);
        return "fragments/bookmark-list";
    }
}

// src/main/resources/application.properties
spring.application.name=bookmark-manager

# H2 Database Configuration
spring.datasource.url=jdbc:h2:mem:bookmarkdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password

# JPA Configuration
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# H2 Console (for development)
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# JTE Configuration
gg.jte.templateLocation=classpath:/templates/
gg.jte.usePreCompiledTemplates=false

# src/main/resources/templates/layout/main.jte
@import gg.jte.Content

@param Content content

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bookmark Manager</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/htmx.org@1.9.10"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
</head>
<body class="bg-gray-50 min-h-screen">
    <div class="container mx-auto px-4 py-8 max-w-4xl">
        <header class="mb-8">
            <h1 class="text-3xl font-bold text-gray-800 flex items-center gap-3">
                <i class="fas fa-bookmark text-blue-600"></i>
                Bookmark Manager
            </h1>
            <p class="text-gray-600 mt-2">Save and organize your favorite links</p>
        </header>
        
        ${content}
    </div>
</body>
</html>

// src/main/resources/templates/index.jte
@import com.example.bookmarkmanager.model.Bookmark
@import java.util.List

@param List<Bookmark> bookmarks
@param String search = ""
@param Bookmark bookmark

@template.layout.main(content = @`
    <!-- Search Section -->
    <div class="mb-6">
        <div class="relative">
            <input 
                type="text" 
                placeholder="Search bookmarks..." 
                value="${search != null ? search : ""}"
                class="w-full px-4 py-3 pr-12 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                hx-get="/search"
                hx-target="#bookmark-list"
                hx-trigger="keyup changed delay:300ms"
                hx-include="this"
                name="search"
            >
            <i class="fas fa-search absolute right-4 top-4 text-gray-400"></i>
        </div>
    </div>

    <!-- Add Bookmark Form -->
    <div class="bg-white rounded-lg shadow-md p-6 mb-6">
        <h2 class="text-xl font-semibold text-gray-800 mb-4 flex items-center gap-2">
            <i class="fas fa-plus-circle text-green-600"></i>
            Add New Bookmark
        </h2>
        <div id="bookmark-form">
            @template.fragments.bookmark-form(bookmark = bookmark)
        </div>
    </div>

    <!-- Bookmarks List -->
    <div class="bg-white rounded-lg shadow-md">
        <div class="p-6 border-b border-gray-200">
            <h2 class="text-xl font-semibold text-gray-800 flex items-center gap-2">
                <i class="fas fa-list text-blue-600"></i>
                Your Bookmarks
                <span class="text-sm font-normal text-gray-500">(${bookmarks.size()} total)</span>
            </h2>
        </div>
        <div id="bookmark-list">
            @template.fragments.bookmark-list(bookmarks = bookmarks)
        </div>
    </div>
`)

// src/main/resources/templates/fragments/bookmark-form.jte
@import com.example.bookmarkmanager.model.Bookmark
@import org.springframework.validation.ObjectError
@import java.util.List

@param Bookmark bookmark
@param List<ObjectError> errors = null

<form hx-post="/bookmarks" hx-target="#bookmark-list" hx-swap="outerHTML">
    @if(errors != null && !errors.isEmpty())
        <div class="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
            <div class="flex">
                <i class="fas fa-exclamation-triangle text-red-500 mt-1 mr-2"></i>
                <div>
                    <h4 class="text-red-800 font-medium">Please fix the following errors:</h4>
                    <ul class="text-red-700 text-sm mt-1 list-disc list-inside">
                        @for(ObjectError error : errors)
                            <li>${error.getDefaultMessage()}</li>
                        @endfor
                    </ul>
                </div>
            </div>
        </div>
    @endif
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <div>
            <label for="title" class="block text-sm font-medium text-gray-700 mb-2">
                <i class="fas fa-heading text-gray-500 mr-1"></i>
                Title
            </label>
            <input 
                type="text" 
                id="title"
                name="title" 
                value="${bookmark.getTitle() != null ? bookmark.getTitle() : ""}"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Enter bookmark title"
                required
            >
        </div>
        <div>
            <label for="url" class="block text-sm font-medium text-gray-700 mb-2">
                <i class="fas fa-link text-gray-500 mr-1"></i>
                URL
            </label>
            <input 
                type="url" 
                id="url"
                name="url" 
                value="${bookmark.getUrl() != null ? bookmark.getUrl() : ""}"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="https://example.com"
                required
            >
        </div>
    </div>
    
    <div class="mb-4">
        <label for="comment" class="block text-sm font-medium text-gray-700 mb-2">
            <i class="fas fa-comment text-gray-500 mr-1"></i>
            Comment (Optional)
        </label>
        <textarea 
            id="comment"
            name="comment" 
            rows="3"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
            placeholder="Add a comment about this bookmark..."
        >${bookmark.getComment() != null ? bookmark.getComment() : ""}</textarea>
    </div>
    
    <button 
        type="submit" 
        class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-md transition duration-200 ease-in-out flex items-center gap-2"
    >
        <i class="fas fa-save"></i>
        Save Bookmark
    </button>
</form>

// src/main/resources/templates/fragments/bookmark-list.jte
@import com.example.bookmarkmanager.model.Bookmark
@import java.util.List
@import java.time.format.DateTimeFormatter

@param List<Bookmark> bookmarks

<div id="bookmark-list">
    @if(bookmarks.isEmpty())
        <div class="p-8 text-center text-gray-500">
            <i class="fas fa-bookmark fa-3x mb-4 text-gray-300"></i>
            <p class="text-lg">No bookmarks found</p>
            <p class="text-sm">Add your first bookmark using the form above</p>
        </div>
    @else
        @for(Bookmark bookmark : bookmarks)
            <div class="border-b border-gray-200 last:border-b-0">
                <div class="p-6 hover:bg-gray-50 transition duration-150 ease-in-out">
                    <div class="flex justify-between items-start">
                        <div class="flex-1">
                            <div class="flex items-start gap-3">
                                <i class="fas fa-bookmark text-blue-600 mt-1"></i>
                                <div class="flex-1">
                                    <h3 class="text-lg font-semibold text-gray-800 mb-2">
                                        ${bookmark.getTitle()}
                                    </h3>
                                    <a 
                                        href="${bookmark.getUrl()}" 
                                        target="_blank" 
                                        class="text-blue-600 hover:text-blue-800 text-sm break-all inline-flex items-center gap-1"
                                    >
                                        <i class="fas fa-external-link-alt"></i>
                                        ${bookmark.getUrl()}
                                    </a>
                                    @if(bookmark.getComment() != null && !bookmark.getComment().trim().isEmpty())
                                        <div class="mt-3 p-3 bg-gray-50 rounded-lg">
                                            <p class="text-gray-700 text-sm whitespace-pre-wrap">${bookmark.getComment()}</p>
                                        </div>
                                    @endif
                                    <div class="mt-3 flex items-center gap-4 text-xs text-gray-500">
                                        <span>
                                            <i class="fas fa-calendar-plus mr-1"></i>
                                            Added ${bookmark.getCreatedAt().format(DateTimeFormatter.ofPattern("MMM dd, yyyy 'at' HH:mm"))}
                                        </span>
                                        @if(!bookmark.getCreatedAt().equals(bookmark.getUpdatedAt()))
                                            <span>
                                                <i class="fas fa-edit mr-1"></i>
                                                Updated ${bookmark.getUpdatedAt().format(DateTimeFormatter.ofPattern("MMM dd, yyyy 'at' HH:mm"))}
                                            </span>
                                        @endif
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="flex gap-2 ml-4">
                            <button 
                                hx-get="/bookmarks/${bookmark.getId()}/edit"
                                hx-target="#edit-form-${bookmark.getId()}"
                                hx-swap="outerHTML"
                                class="text-gray-600 hover:text-blue-600 p-2 hover:bg-blue-50 rounded transition duration-150 ease-in-out"
                                title="Edit bookmark"
                            >
                                <i class="fas fa-edit"></i>
                            </button>
                            <button 
                                hx-delete="/bookmarks/${bookmark.getId()}"
                                hx-target="#bookmark-list"
                                hx-swap="outerHTML"
                                hx-confirm="Are you sure you want to delete this bookmark?"
                                class="text-gray-600 hover:text-red-600 p-2 hover:bg-red-50 rounded transition duration-150 ease-in-out"
                                title="Delete bookmark"
                            >
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                    <div id="edit-form-${bookmark.getId()}"></div>
                </div>
            </div>
        @endfor
    @endif
</div>

// src/main/resources/templates/fragments/edit-form.jte
@import com.example.bookmarkmanager.model.Bookmark
@import org.springframework.validation.ObjectError
@import java.util.List

@param Bookmark bookmark
@param List<ObjectError> errors = null

<div class="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
    <h4 class="text-lg font-medium text-gray-800 mb-4 flex items-center gap-2">
        <i class="fas fa-edit text-blue-600"></i>
        Edit Bookmark
    </h4>
    
    @if(errors != null && !errors.isEmpty())
        <div class="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg">
            <div class="flex">
                <i class="fas fa-exclamation-triangle text-red-500 mt-1 mr-2"></i>
                <div>
                    <h5 class="text-red-800 font-medium">Please fix the following errors:</h5>
                    <ul class="text-red-700 text-sm mt-1 list-disc list-inside">
                        @for(ObjectError error : errors)
                            <li>${error.getDefaultMessage()}</li>
                        @endfor
                    </ul>
                </div>
            </div>
        </div>
    @endif
    
    <form hx-put="/bookmarks/${bookmark.getId()}" hx-target="#bookmark-list" hx-swap="outerHTML">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
                <label for="edit-title-${bookmark.getId()}" class="block text-sm font-medium text-gray-700 mb-2">
                    <i class="fas fa-heading text-gray-500 mr-1"></i>
                    Title
                </label>
                <input 
                    type="text" 
                    id="edit-title-${bookmark.getId()}"
                    name="title" 
                    value="${bookmark.getTitle()}"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                >
            </div>
            <div>
                <label for="edit-url-${bookmark.getId()}" class="block text-sm font-medium text-gray-700 mb-2">
                    <i class="fas fa-link text-gray-500 mr-1"></i>
                    URL
                </label>
                <input 
                    type="url" 
                    id="edit-url-${bookmark.getId()}"
                    name="url" 
                    value="${bookmark.getUrl()}"
                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    required
                >
            </div>
        </div>
        
        <div class="mb-4">
            <label for="edit-comment-${bookmark.getId()}" class="block text-sm font-medium text-gray-700 mb-2">
                <i class="fas fa-comment text-gray-500 mr-1"></i>
                Comment (Optional)
            </label>
            <textarea 
                id="edit-comment-${bookmark.getId()}"
                name="comment" 
                rows="3"
                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
            >${bookmark.getComment() != null ? bookmark.getComment() : ""}</textarea>
        </div>
        
        <div class="flex gap-3">
            <button 
                type="submit" 
                class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md transition duration-200 ease-in-out flex items-center gap-2"
            >
                <i class="fas fa-check"></i>
                Update
            </button>
            <button 
                type="button"
                hx-get="/"
                hx-target="body"
                hx-swap="outerHTML"
                class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md transition duration-200 ease-in-out flex items-center gap-2"
            >
                <i class="fas fa-times"></i>
                Cancel
            </button>
        </div>
    </form>
</div>
