import java.io.File;
import java.util.List;
import java.util.Map;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.client.MultipartBodyBuilder;
import org.springframework.util.MultiValueMap;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.client.WebClient;

public class CustomWebClient {

  private final WebClient webClient;
  private String scheme;
  private String host;
  private int port;
  private String path;

  public CustomWebClient() {
    webClient = WebClient.builder().build();
  }

  private MultiValueMap<String, HttpEntity<?>> addFiles(List<File> files) {
    MultipartBodyBuilder builder = new MultipartBodyBuilder();
    if(files != null && files.size() > 0){
      for(File file : files){
        builder.part("file", new FileSystemResource(file));
      }
    }
    return builder.build();
  }

  private void getURIParams(String apiUrl) {
    this.scheme = apiUrl.substring(0, apiUrl.indexOf(":"));
    this.host = apiUrl.substring(scheme.length() + 3, apiUrl.lastIndexOf(":"));
    String urlHolder = apiUrl.substring(apiUrl.lastIndexOf(":") + 1);
    this.port = Integer.parseInt(urlHolder.substring(0, urlHolder.indexOf("/")));
    this.path = urlHolder.substring(urlHolder.indexOf("/"));
  }


  public <T> T httpRequest(
      HttpMethod httpMethod,
      String apiURL,
      Map<String, String> params,
      Map<String, String> headers,
      String requestBody,
      MediaType mediaType,
      Class<T> responseClass,
      List<File> files,
      long timeout
  ) {

    return webClient
        .method(httpMethod)
        .uri(uriBuilder -> {
          getURIParams(apiURL);
          uriBuilder.scheme(scheme).host(host).port(port).path(path);
          if(params != null){
            for (Map.Entry<String, String> entry : params.entrySet()) {
              uriBuilder.queryParam(entry.getKey(), entry.getValue());
            }
          }
          return uriBuilder.build();
        })
        .headers(httpHeaders -> {
          httpHeaders.set("Content-Type", "application/JSON");
          if (headers != null) {
            for (Map.Entry<String, String> entry : headers.entrySet()) {
              httpHeaders.set(entry.getKey(), entry.getValue());
            }
          }
        })
        .contentType(mediaType).accept(MediaType.ALL)
        .body(
            mediaType.equals(MediaType.APPLICATION_JSON) ?
                BodyInserters.fromValue(requestBody != null ? requestBody : "") :
                BodyInserters.fromMultipartData(addFiles(files)))
        .retrieve()
        .bodyToMono(responseClass)
        .timeout(Duration.ofSeconds(timeout))
        .onErrorMap(e -> new Exception("Message", e))
        .block();
  }

}

/////

public <T> List<T> getList(String relativeUrl, 
                           ParameterizedTypeReference<List<T>> typeReference){
    try{
        return client
            .get()
            .uri(relativeUrl)
            .retrieve()
            .bodyToMono(typeReference)
            .block();
    } catch(Exception e){
        return null;
    }
}

And call that function with

ParameterizedTypeReference<List<MyClass>> typeReference = new ParameterizedTypeReference<List<MyClass>>(){};
List<MyClass> strings = getList(relativeUrl, typeReference);


https://stackoverflow.com/questions/53378161/webflux-webclient-and-generic-types


///

JDK's httpclient 

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.io.IOException;

public class HttpClientExample {

    public static void main(String[] args) throws IOException, InterruptedException {
        HttpClient client = HttpClient.newHttpClient();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("https://example.com/api/data"))
                .build();

        // Example 1: Reading response body as a String
        HttpResponse<String> stringResponse = client.send(request, HttpResponse.BodyHandlers.ofString(StandardCharsets.UTF_8));
        System.out.println("String Response Body: " + stringResponse.body());

        // Example 2: Reading response body as a byte array
        HttpResponse<byte[]> byteArrayResponse = client.send(request, HttpResponse.BodyHandlers.ofByteArray());
        System.out.println("Byte Array Response Body Length: " + byteArrayResponse.body().length);

        // Example 3: Discarding response body
        HttpResponse<Void> voidResponse = client.send(request, HttpResponse.BodyHandlers.discarding());
        System.out.println("Void Response Status Code: " + voidResponse.statusCode());
    }
}


import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;

public class JsonBodyHandler<W> implements HttpResponse.BodyHandler<W> {
    private final Class<W> wClass;

    public JsonBodyHandler(Class<W> wClass) {
        this.wClass = wClass;
    }

    @Override
    public HttpResponse.BodySubscriber<W> apply(HttpResponse.ResponseInfo responseInfo) {
        return asJSON(wClass);
    }

    public static <W> HttpResponse.BodySubscriber<W> asJSON(Class<W> targetType) {
        HttpResponse.BodySubscriber<String> upstream = HttpResponse.BodySubscribers.ofString(StandardCharsets.UTF_8);
        return HttpResponse.BodySubscribers.mapping(
                upstream,
                (String body) -> {
                    try {
                        ObjectMapper objectMapper = new ObjectMapper();
                        return objectMapper.readValue(body, targetType);
                    } catch (IOException e) {
                        throw new UncheckedIOException(e);
                    }
                });
    }
}

https://www.google.com/url?sa=t&source=web&rct=j&opi=89978449&url=https://openjdk.org/groups/net/httpclient/recipes-incubating.html&ved=2ahUKEwiK8qHM6fCNAxWlj4kEHVbuHEMQFnoECB4QAQ&usg=AOvVaw1Mdm4-cdR7lYT1RF3AYvEg
