# Projects #

## Book ## 

### Spring security in action ###

## Documentation
* https://docs.spring.io/spring-security/reference/index.html

## Article
* [https://reflectoring.io/spring-security/](https://reflectoring.io/spring-security/)

## Examples

### 1 [Spring security samples](https://github.com/spring-projects/spring-security-samples)
### 2 [https://spring.io/guides/tutorials/spring-boot-oauth2](https://spring.io/guides/tutorials/spring-boot-oauth2)

#### [JWT login example](https://github.com/spring-projects/spring-security-samples/tree/main/servlet/spring-boot/java/jwt/login)
* Since any endpoint is protected by basic authentication and bearer token authentication, we can hit any endpoint either via basic authentication or using a bearer token
* This works:
  * $ curl -v user:password@localhost:8080 && echo  
* Or with a bearer token
  * $ export TOKEN=`curl -v -XPOST user:password@localhost:8080/token`
  * $ echo $TOKEN
  * $ curl -v -H "Authorization: Bearer $TOKEN" localhost:8080 && echo
* We can even hit the token endpoint using a bearer token
  * $ export TOKEN=`curl -v -XPOST -H "Authorization: Bearer $TOKEN" localhost:8080/token`

The application log shows that any endpoint is protected by basic authentication and bearer token authentication
```
2023-02-19T11:00:40.805-05:00  INFO 71948 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Will secure any request with 
[
org.springframework.security.web.session.DisableEncodeUrlFilter@64deb58f, 
org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@2b1cd7bc, 
org.springframework.security.web.context.SecurityContextHolderFilter@497b560e, 
org.springframework.security.web.header.HeaderWriterFilter@3c66b7d8, 
org.springframework.security.web.csrf.CsrfFilter@6198e9b5, 
org.springframework.security.web.authentication.logout.LogoutFilter@33a55bd8, 
org.springframework.security.oauth2.server.resource.web.authentication.BearerTokenAuthenticationFilter@7cac93fe, 
org.springframework.security.web.authentication.www.BasicAuthenticationFilter@611640f0, 
org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3ba348ca, 
org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@239f017e, 
org.springframework.security.web.authentication.AnonymousAuthenticationFilter@33379242, 
org.springframework.security.web.session.SessionManagementFilter@3178219a, 
org.springframework.security.web.access.ExceptionTranslationFilter@60c1663c, 
org.springframework.security.web.access.intercept.AuthorizationFilter@3625a016]
```

### 2 danvega-jwt - (https://github.com/danvega/jwt.git)
* https://www.danvega.dev/blog/spring-security-jwt
* This is a good example to show 
  * Multiple security filter chains
  * Protect /token endpoint with basic authentication
  * Protect other restful endpoints with oauth authentication

### 3 spring-boot-testing-security (greg - https://github.com/spring-boot-learning-youtube)
* Good example of unit testing security configuration

### 4 SpringBootSecurity (https://github.com/wdkeyser02/SpringBootTutorialSecurity)
* Very good step by step examples
* part04 uses h2 console
* https://www.youtube.com/watch?v=EfaQp3OS5yI&list=PLbuI9mmWSoUEIatm6_1KPaJIJfYX5L4To
```
spring.h2.console.enabled = true

# default value /h2-console
# http://localhost:8080/h2-console/
spring.h2.console.path = /h2-console/
```

### 5 message-sample
#### Talks
* https://github.com/jgrandja/messaging-sample
* [Joes'](https://github.com/jgrandja/presentations/blob/master/SpringIO-Barcelona2017-JoeGrandja.pdf)
* [Getting Started with Spring Authorization Server](https://www.youtube.com/watch?v=3NliXoTcPSo)
* [Devnexus 2022 - Getting Started with Spring Authorization Server - Joe Grandja](https://www.youtube.com/watch?v=ksp8X6Pfbp8)

gradlew bootRun

### 6 spring-security-oauth2-microservices-demo
* https://github.com/sivaprasadreddy/spring-security-oauth2-microservices-demo/tree/main


###  7 Oauth 2 protocol patterns 
* https://www.youtube.com/watch?v=v2J32nd0g24

* https://github.com/jgrandja/oauth2-protocol-patterns.git
* https://www.youtube.com/watch?v=JnYIsvJY7gM

### 8 Spring security in action 2nd edition 
 

### 9 
* https://reflectoring.io/spring-security/
* https://github.com/thombergs/code-examples/tree/master/spring-security/getting-started

### 10 
* https://github.com/jgrandja/multitenant-spring-auth-server/tree/main
  * demo sample provides custom configuration for supporting multi-tenancy in Spring Authorization Server

### 11 
* https://github.com/habuma/spring-security-oauth2-jwt-example/tree/master
  * Good example to explain fundamental concepts

