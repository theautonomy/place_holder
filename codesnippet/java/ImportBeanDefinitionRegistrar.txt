// pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/>
    </parent>
    
    <groupId>com.example</groupId>
    <artifactId>registrar-demo</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    
    <properties>
        <java.version>17</java.version>
    </properties>
    
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

// src/main/java/com/example/registrar/annotation/EnableCustomServices.java
package com.example.registrar.annotation;

import com.example.registrar.config.CustomServiceRegistrar;
import org.springframework.context.annotation.Import;

import java.lang.annotation.*;

@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Import(CustomServiceRegistrar.class)
public @interface EnableCustomServices {
    String[] basePackages() default {};
    Class<?>[] basePackageClasses() default {};
}

// src/main/java/com/example/registrar/annotation/CustomService.java
package com.example.registrar.annotation;

import java.lang.annotation.*;

@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface CustomService {
    String value() default "";
    String description() default "";
    int priority() default 0;
}

// src/main/java/com/example/registrar/config/CustomServiceRegistrar.java
package com.example.registrar.config;

import com.example.registrar.annotation.CustomService;
import com.example.registrar.annotation.EnableCustomServices;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.support.BeanDefinitionBuilder;
import org.springframework.beans.factory.support.BeanDefinitionRegistry;
import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;
import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;
import org.springframework.core.annotation.AnnotationAttributes;
import org.springframework.core.type.AnnotationMetadata;
import org.springframework.core.type.filter.AnnotationTypeFilter;
import org.springframework.util.ClassUtils;
import org.springframework.util.StringUtils;

import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

public class CustomServiceRegistrar implements ImportBeanDefinitionRegistrar {

    @Override
    public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry) {
        AnnotationAttributes attributes = AnnotationAttributes.fromMap(
            metadata.getAnnotationAttributes(EnableCustomServices.class.getName())
        );
        
        if (attributes == null) {
            return;
        }
        
        Set<String> packagesToScan = getPackagesToScan(attributes, metadata);
        
        // Create a scanner to find classes annotated with @CustomService
        ClassPathScanningCandidateComponentProvider scanner = 
            new ClassPathScanningCandidateComponentProvider(false);
        scanner.addIncludeFilter(new AnnotationTypeFilter(CustomService.class));
        
        for (String packageToScan : packagesToScan) {
            Set<BeanDefinition> candidateComponents = scanner.findCandidateComponents(packageToScan);
            
            for (BeanDefinition candidate : candidateComponents) {
                try {
                    Class<?> clazz = ClassUtils.forName(candidate.getBeanClassName(), null);
                    CustomService customService = clazz.getAnnotation(CustomService.class);
                    
                    // Create bean definition
                    BeanDefinitionBuilder builder = BeanDefinitionBuilder
                        .genericBeanDefinition(clazz);
                    
                    // Add custom properties based on annotation
                    if (StringUtils.hasText(customService.description())) {
                        builder.addPropertyValue("description", customService.description());
                    }
                    builder.addPropertyValue("priority", customService.priority());
                    
                    // Determine bean name
                    String beanName = StringUtils.hasText(customService.value()) 
                        ? customService.value() 
                        : StringUtils.uncapitalize(clazz.getSimpleName());
                    
                    // Register the bean
                    registry.registerBeanDefinition(beanName, builder.getBeanDefinition());
                    
                    System.out.println("Registered custom service: " + beanName + 
                        " (class: " + clazz.getName() + ")");
                        
                } catch (ClassNotFoundException e) {
                    throw new RuntimeException("Failed to load class: " + candidate.getBeanClassName(), e);
                }
            }
        }
    }
    
    private Set<String> getPackagesToScan(AnnotationAttributes attributes, AnnotationMetadata metadata) {
        String[] basePackages = attributes.getStringArray("basePackages");
        Class<?>[] basePackageClasses = attributes.getClassArray("basePackageClasses");
        
        Set<String> packagesToScan = new LinkedHashSet<>();
        
        // Add base packages
        packagesToScan.addAll(Arrays.asList(basePackages));
        
        // Add packages of base package classes
        for (Class<?> clazz : basePackageClasses) {
            packagesToScan.add(ClassUtils.getPackageName(clazz));
        }
        
        // If no packages specified, use the package of the importing class
        if (packagesToScan.isEmpty()) {
            packagesToScan.add(ClassUtils.getPackageName(metadata.getClassName()));
        }
        
        return packagesToScan;
    }
}

// src/main/java/com/example/registrar/service/BaseCustomService.java
package com.example.registrar.service;

public abstract class BaseCustomService {
    private String description;
    private int priority;
    
    public abstract void performAction();
    
    public String getDescription() {
        return description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    public int getPriority() {
        return priority;
    }
    
    public void setPriority(int priority) {
        this.priority = priority;
    }
    
    @Override
    public String toString() {
        return this.getClass().getSimpleName() + 
            " [description=" + description + ", priority=" + priority + "]";
    }
}

// src/main/java/com/example/registrar/service/EmailService.java
package com.example.registrar.service;

import com.example.registrar.annotation.CustomService;

@CustomService(value = "emailService", description = "Handles email operations", priority = 1)
public class EmailService extends BaseCustomService {
    
    @Override
    public void performAction() {
        System.out.println("Sending email...");
    }
}

// src/main/java/com/example/registrar/service/NotificationService.java
package com.example.registrar.service;

import com.example.registrar.annotation.CustomService;

@CustomService(value = "notificationService", description = "Handles push notifications", priority = 2)
public class NotificationService extends BaseCustomService {
    
    @Override
    public void performAction() {
        System.out.println("Sending push notification...");
    }
}

// src/main/java/com/example/registrar/service/LoggingService.java
package com.example.registrar.service;

import com.example.registrar.annotation.CustomService;

@CustomService(description = "Handles application logging", priority = 3)
public class LoggingService extends BaseCustomService {
    
    @Override
    public void performAction() {
        System.out.println("Logging application events...");
    }
}

// src/main/java/com/example/registrar/controller/DemoController.java
package com.example.registrar.controller;

import com.example.registrar.service.BaseCustomService;
import org.springframework.context.ApplicationContext;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@RestController
public class DemoController {
    
    private final ApplicationContext applicationContext;
    
    public DemoController(ApplicationContext applicationContext) {
        this.applicationContext = applicationContext;
    }
    
    @GetMapping("/services")
    public List<String> getRegisteredServices() {
        Map<String, BaseCustomService> services = 
            applicationContext.getBeansOfType(BaseCustomService.class);
        
        List<String> serviceInfo = new ArrayList<>();
        
        services.forEach((name, service) -> {
            serviceInfo.add("Bean Name: " + name + " - " + service.toString());
        });
        
        return serviceInfo;
    }
    
    @GetMapping("/execute")
    public String executeServices() {
        Map<String, BaseCustomService> services = 
            applicationContext.getBeansOfType(BaseCustomService.class);
        
        services.values().stream()
            .sorted((s1, s2) -> Integer.compare(s1.getPriority(), s2.getPriority()))
            .forEach(BaseCustomService::performAction);
        
        return "Executed " + services.size() + " custom services";
    }
}

// src/main/java/com/example/registrar/RegistrarDemoApplication.java
package com.example.registrar;

import com.example.registrar.annotation.EnableCustomServices;
import com.example.registrar.service.BaseCustomService;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

import java.util.Map;

@SpringBootApplication
@EnableCustomServices(basePackages = "com.example.registrar.service")
public class RegistrarDemoApplication implements CommandLineRunner {
    
    private final ApplicationContext applicationContext;
    
    public RegistrarDemoApplication(ApplicationContext applicationContext) {
        this.applicationContext = applicationContext;
    }
    
    public static void main(String[] args) {
        SpringApplication.run(RegistrarDemoApplication.class, args);
    }
    
    @Override
    public void run(String... args) {
        System.out.println("\n=== Custom Services Registered ===");
        
        Map<String, BaseCustomService> services = 
            applicationContext.getBeansOfType(BaseCustomService.class);
        
        services.forEach((name, service) -> {
            System.out.println("Bean: " + name + " -> " + service);
        });
        
        System.out.println("\n=== Executing Services by Priority ===");
        services.values().stream()
            .sorted((s1, s2) -> Integer.compare(s1.getPriority(), s2.getPriority()))
            .forEach(BaseCustomService::performAction);
        
        System.out.println("\n=== Demo Complete ===");
        System.out.println("Visit http://localhost:8080/services to see registered services");
        System.out.println("Visit http://localhost:8080/execute to execute all services");
    }
}

// src/main/resources/application.yml
server:
  port: 8080

logging:
  level:
    com.example.registrar: DEBUG
