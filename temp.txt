server.port=8081


# JPA property settings
spring.jpa.database=mysql
spring.jpa.hibernate.ddl-auto=update
spring.jpa.generate-ddl=true
spring.jpa.show-sql=true

spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

datasources.registration.datasource_one.jdbc-url=jdbc:mysql://localhost:3306/demo_database
datasources.registration.datasource_one.driver-class-name=com.mysql.cj.jdbc.Driver
datasources.registration.datasource_one.maximum-pool-size=2
datasources.registration.datasource_one.username=root
datasources.registration.datasource_one.password=123456

datasources.registration.datasource_two.jdbc-url=jdbc:mysql://localhost:3306/demo_database_2
datasources.registration.datasource_two.driver-class-name=com.mysql.cj.jdbc.Driver
datasources.registration.datasource_two.maximum-pool-size=2
datasources.registration.datasource_two.username=root
datasources.registration.datasource_two.password=123456

datasources.registration.datasource_three.jdbc-url=jdbc:postgresql://localhost:5432/postgres
datasources.registration.datasource_three.driver-class-name=org.postgresql.Driver
datasources.registration.datasource_three.maximum-pool-size=2
datasources.registration.datasource_three.username=postgres
datasources.registration.datasource_three.password=postgres


====
package com.weili.datasource.config;

import java.util.Map;
import java.util.stream.Collectors;

import javax.sql.DataSource;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class MyDataSourceConfig {

    @ConfigurationProperties(prefix = "datasources")
    private static record HikariConfigs(Map<String, HikariConfig> registration) {
        HikariConfigs {
            registration = Map.copyOf(registration);
        }
    }

    @Bean
    Map<DataSourceName, DataSource> datasources(HikariConfigs hikariConfigs) {
        return Map.copyOf(
                hikariConfigs.registration().entrySet().stream()
                        .collect(
                                Collectors.toUnmodifiableMap(
                                        entry -> new DataSourceName(entry.getKey().toUpperCase()),
                                        entry -> new HikariDataSource(entry.getValue()))));
    }
}
