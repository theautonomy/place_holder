// pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/>
    </parent>
    <groupId>com.example</groupId>
    <artifactId>records-properties-demo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>records-properties-demo</name>
    <description>Demo project for Spring Boot with Records as Configuration Properties</description>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

// =====================================

// src/main/java/com/example/demo/RecordsPropertiesDemoApplication.java
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.ConfigurationPropertiesScan;

@SpringBootApplication
@ConfigurationPropertiesScan
public class RecordsPropertiesDemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(RecordsPropertiesDemoApplication.class, args);
    }
}

// =====================================

// src/main/java/com/example/demo/config/DatabaseProperties.java
package com.example.demo.config;

import jakarta.validation.constraints.*;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.validation.annotation.Validated;

import java.time.Duration;

/**
 * Database configuration properties using Java Record.
 * Demonstrates validation, nested records, and default values.
 */
@ConfigurationProperties(prefix = "app.database")
@Validated
public record DatabaseProperties(
        @NotBlank(message = "Database URL cannot be blank")
        String url,
        
        @NotBlank(message = "Username cannot be blank")
        @Size(min = 3, max = 50, message = "Username must be between 3 and 50 characters")
        String username,
        
        @NotBlank(message = "Password cannot be blank")
        @Size(min = 8, message = "Password must be at least 8 characters")
        String password,
        
        @Min(value = 1, message = "Pool size must be at least 1")
        @Max(value = 100, message = "Pool size cannot exceed 100")
        Integer poolSize,
        
        @NotNull(message = "Connection timeout cannot be null")
        Duration connectionTimeout,
        
        ConnectionPool pool,
        
        @NotNull(message = "Security settings cannot be null")
        Security security
) {
    // Constructor with default values
    public DatabaseProperties {
        if (poolSize == null) {
            poolSize = 10;
        }
        if (connectionTimeout == null) {
            connectionTimeout = Duration.ofSeconds(30);
        }
        if (pool == null) {
            pool = new ConnectionPool(true, Duration.ofMinutes(5), 50);
        }
        if (security == null) {
            security = new Security(true, "TLSv1.3");
        }
    }
    
    /**
     * Nested record for connection pool configuration
     */
    public record ConnectionPool(
            boolean enabled,
            
            @NotNull(message = "Max idle time cannot be null")
            Duration maxIdleTime,
            
            @Min(value = 1, message = "Max connections must be at least 1")
            @Max(value = 200, message = "Max connections cannot exceed 200")
            Integer maxConnections
    ) {
        public ConnectionPool {
            if (maxIdleTime == null) {
                maxIdleTime = Duration.ofMinutes(10);
            }
            if (maxConnections == null) {
                maxConnections = 20;
            }
        }
    }
    
    /**
     * Nested record for security configuration
     */
    public record Security(
            boolean sslEnabled,
            
            @Pattern(regexp = "TLSv1\\.[23]", message = "TLS version must be TLSv1.2 or TLSv1.3")
            String tlsVersion
    ) {
        public Security {
            if (tlsVersion == null || tlsVersion.isBlank()) {
                tlsVersion = "TLSv1.3";
            }
        }
    }
}

// =====================================

// src/main/java/com/example/demo/config/ApiProperties.java
package com.example.demo.config;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.validation.annotation.Validated;

import java.time.Duration;
import java.util.List;
import java.util.Map;

/**
 * API configuration properties demonstrating collections and complex validation
 */
@ConfigurationProperties(prefix = "app.api")
@Validated
public record ApiProperties(
        @NotBlank(message = "Base URL cannot be blank")
        @Pattern(regexp = "^https?://.*", message = "Base URL must start with http:// or https://")
        String baseUrl,
        
        @Min(value = 1, message = "Version must be at least 1")
        @Max(value = 10, message = "Version cannot exceed 10")
        Integer version,
        
        @NotNull(message = "Timeout configuration cannot be null")
        @Valid
        Timeouts timeouts,
        
        @NotNull(message = "Rate limiting configuration cannot be null")
        @Valid
        RateLimit rateLimit,
        
        @NotEmpty(message = "At least one endpoint must be configured")
        @Valid
        List<Endpoint> endpoints,
        
        @NotNull(message = "Headers cannot be null")
        Map<String, String> defaultHeaders
) {
    public ApiProperties {
        if (version == null) {
            version = 1;
        }
        if (timeouts == null) {
            timeouts = new Timeouts(Duration.ofSeconds(30), Duration.ofSeconds(60));
        }
        if (rateLimit == null) {
            rateLimit = new RateLimit(100, Duration.ofMinutes(1));
        }
        if (defaultHeaders == null) {
            defaultHeaders = Map.of("Content-Type", "application/json");
        }
    }
    
    public record Timeouts(
            @NotNull(message = "Connect timeout cannot be null")
            Duration connect,
            
            @NotNull(message = "Read timeout cannot be null")
            Duration read
    ) {}
    
    public record RateLimit(
            @Min(value = 1, message = "Requests per window must be at least 1")
            Integer requestsPerWindow,
            
            @NotNull(message = "Window duration cannot be null")
            Duration windowDuration
    ) {}
    
    public record Endpoint(
            @NotBlank(message = "Endpoint name cannot be blank")
            String name,
            
            @NotBlank(message = "Path cannot be blank")
            @Pattern(regexp = "^/.*", message = "Path must start with /")
            String path,
            
            @NotNull(message = "HTTP method cannot be null")
            HttpMethod method,
            
            boolean authRequired
    ) {
        public Endpoint {
            if (method == null) {
                method = HttpMethod.GET;
            }
        }
    }
    
    public enum HttpMethod {
        GET, POST, PUT, DELETE, PATCH
    }
}

// =====================================

// src/main/java/com/example/demo/config/CacheProperties.java
package com.example.demo.config;

import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.validation.annotation.Validated;

import java.time.Duration;

/**
 * Cache configuration properties with enum validation
 */
@ConfigurationProperties(prefix = "app.cache")
@Validated
public record CacheProperties(
        @NotNull(message = "Cache type cannot be null")
        CacheType type,
        
        @NotBlank(message = "Cache name cannot be blank")
        String name,
        
        @Min(value = 1, message = "Max size must be at least 1")
        Long maxSize,
        
        @NotNull(message = "TTL cannot be null")
        Duration ttl,
        
        @NotNull(message = "Redis configuration cannot be null")
        Redis redis
) {
    public CacheProperties {
        if (maxSize == null) {
            maxSize = 1000L;
        }
        if (ttl == null) {
            ttl = Duration.ofHours(1);
        }
        if (redis == null) {
            redis = new Redis("localhost", 6379, false);
        }
    }
    
    public enum CacheType {
        IN_MEMORY, REDIS, HYBRID
    }
    
    public record Redis(
            @NotBlank(message = "Redis host cannot be blank")
            String host,
            
            @Min(value = 1, message = "Port must be greater than 0")
            Integer port,
            
            boolean clusterMode
    ) {
        public Redis {
            if (port == null) {
                port = 6379;
            }
        }
    }
}

// =====================================

// src/main/java/com/example/demo/controller/PropertiesController.java
package com.example.demo.controller;

import com.example.demo.config.ApiProperties;
import com.example.demo.config.CacheProperties;
import com.example.demo.config.DatabaseProperties;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

/**
 * REST controller to expose configuration properties for demonstration
 */
@RestController
@RequestMapping("/api/config")
public class PropertiesController {
    
    private final DatabaseProperties databaseProperties;
    private final ApiProperties apiProperties;
    private final CacheProperties cacheProperties;
    
    public PropertiesController(DatabaseProperties databaseProperties,
                              ApiProperties apiProperties,
                              CacheProperties cacheProperties) {
        this.databaseProperties = databaseProperties;
        this.apiProperties = apiProperties;
        this.cacheProperties = cacheProperties;
    }
    
    @GetMapping("/database")
    public DatabaseInfo getDatabaseConfig() {
        return new DatabaseInfo(
                databaseProperties.url(),
                databaseProperties.username(),
                "[PROTECTED]", // Don't expose password
                databaseProperties.poolSize(),
                databaseProperties.connectionTimeout().toString(),
                databaseProperties.pool(),
                databaseProperties.security()
        );
    }
    
    @GetMapping("/api")
    public ApiProperties getApiConfig() {
        return apiProperties;
    }
    
    @GetMapping("/cache")
    public CacheProperties getCacheConfig() {
        return cacheProperties;
    }
    
    @GetMapping("/all")
    public Map<String, Object> getAllConfigs() {
        return Map.of(
                "database", getDatabaseConfig(),
                "api", apiProperties,
                "cache", cacheProperties
        );
    }
    
    // DTO to hide sensitive information
    public record DatabaseInfo(
            String url,
            String username,
            String password,
            Integer poolSize,
            String connectionTimeout,
            DatabaseProperties.ConnectionPool pool,
            DatabaseProperties.Security security
    ) {}
}

// =====================================

// src/main/java/com/example/demo/service/ConfigurationService.java
package com.example.demo.service;

import com.example.demo.config.ApiProperties;
import com.example.demo.config.CacheProperties;
import com.example.demo.config.DatabaseProperties;
import org.springframework.stereotype.Service;

/**
 * Service demonstrating how to use configuration properties in business logic
 */
@Service
public class ConfigurationService {
    
    private final DatabaseProperties databaseProperties;
    private final ApiProperties apiProperties;
    private final CacheProperties cacheProperties;
    
    public ConfigurationService(DatabaseProperties databaseProperties,
                              ApiProperties apiProperties,
                              CacheProperties cacheProperties) {
        this.databaseProperties = databaseProperties;
        this.apiProperties = apiProperties;
        this.cacheProperties = cacheProperties;
    }
    
    public String getDatabaseConnectionString() {
        return String.format("Connecting to %s with pool size %d and timeout %s",
                databaseProperties.url(),
                databaseProperties.poolSize(),
                databaseProperties.connectionTimeout());
    }
    
    public String getApiInfo() {
        return String.format("API v%d available at %s with %d endpoints",
                apiProperties.version(),
                apiProperties.baseUrl(),
                apiProperties.endpoints().size());
    }
    
    public String getCacheInfo() {
        return String.format("Using %s cache '%s' with max size %d and TTL %s",
                cacheProperties.type(),
                cacheProperties.name(),
                cacheProperties.maxSize(),
                cacheProperties.ttl());
    }
    
    public boolean isDatabaseSecure() {
        return databaseProperties.security().sslEnabled();
    }
    
    public boolean isApiRateLimited() {
        return apiProperties.rateLimit().requestsPerWindow() > 0;
    }
}

// =====================================

// src/main/resources/application.yml
app:
  database:
    url: "jdbc:postgresql://localhost:5432/mydb"
    username: "dbuser"
    password: "securepass123"
    pool-size: 25
    connection-timeout: "PT45S"
    pool:
      enabled: true
      max-idle-time: "PT10M"
      max-connections: 75
    security:
      ssl-enabled: true
      tls-version: "TLSv1.3"

  api:
    base-url: "https://api.example.com"
    version: 2
    timeouts:
      connect: "PT30S"
      read: "PT60S"
    rate-limit:
      requests-per-window: 1000
      window-duration: "PT1M"
    endpoints:
      - name: "users"
        path: "/users"
        method: "GET"
        auth-required: true
      - name: "create-user"
        path: "/users"
        method: "POST"
        auth-required: true
      - name: "health"
        path: "/health"
        method: "GET"
        auth-required: false
    default-headers:
      "Content-Type": "application/json"
      "Accept": "application/json"
      "User-Agent": "MyApp/1.0"

  cache:
    type: "REDIS"
    name: "main-cache"
    max-size: 10000
    ttl: "PT2H"
    redis:
      host: "localhost"
      port: 6379
      cluster-mode: false

logging:
  level:
    com.example.demo: DEBUG
    org.springframework.boot.context.properties: DEBUG

// =====================================

// src/test/java/com/example/demo/config/DatabasePropertiesTest.java
package com.example.demo.config;

import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validator;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.time.Duration;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
class DatabasePropertiesTest {
    
    @Autowired
    private Validator validator;
    
    @Test
    void validDatabaseProperties_shouldPassValidation() {
        var properties = new DatabaseProperties(
                "jdbc:postgresql://localhost:5432/test",
                "testuser",
                "password123",
                10,
                Duration.ofSeconds(30),
                new DatabaseProperties.ConnectionPool(true, Duration.ofMinutes(5), 20),
                new DatabaseProperties.Security(true, "TLSv1.3")
        );
        
        Set<ConstraintViolation<DatabaseProperties>> violations = validator.validate(properties);
        assertTrue(violations.isEmpty());
    }
    
    @Test
    void invalidDatabaseProperties_shouldFailValidation() {
        var properties = new DatabaseProperties(
                "", // blank URL
                "ab", // username too short
                "weak", // password too short
                0, // invalid pool size
                Duration.ofSeconds(30),
                null, // null pool
                null // null security
        );
        
        Set<ConstraintViolation<DatabaseProperties>> violations = validator.validate(properties);
        assertFalse(violations.isEmpty());
        
        // Verify specific validation messages
        assertTrue(violations.stream().anyMatch(v -> v.getMessage().contains("URL cannot be blank")));
        assertTrue(violations.stream().anyMatch(v -> v.getMessage().contains("Username must be between")));
        assertTrue(violations.stream().anyMatch(v -> v.getMessage().contains("Password must be at least")));
        assertTrue(violations.stream().anyMatch(v -> v.getMessage().contains("Pool size must be at least")));
    }
    
    @Test
    void databaseProperties_shouldUseDefaults() {
        var properties = new DatabaseProperties(
                "jdbc:postgresql://localhost:5432/test",
                "testuser",
                "password123",
                null, // Should default to 10
                null, // Should default to 30 seconds
                null, // Should use default ConnectionPool
                null  // Should use default Security
        );
        
        assertEquals(10, properties.poolSize());
        assertEquals(Duration.ofSeconds(30), properties.connectionTimeout());
        assertNotNull(properties.pool());
        assertNotNull(properties.security());
        assertTrue(properties.pool().enabled());
        assertEquals(Duration.ofMinutes(5), properties.pool().maxIdleTime());
        assertEquals("TLSv1.3", properties.security().tlsVersion());
    }
}

// =====================================

// README.md
# Spring Boot Records as Configuration Properties Demo

This project demonstrates how to use Java Records as Configuration Properties in Spring Boot with comprehensive validation.

## Features

- **Java Records**: Modern, immutable configuration properties
- **Validation**: Comprehensive validation using Bean Validation annotations
- **Nested Records**: Complex configuration structures with nested records
- **Default Values**: Compact constructor with default value assignment
- **Type Safety**: Compile-time type checking and immutability
- **Documentation**: Well-documented configuration properties

## Key Benefits of Using Records

1. **Immutability**: Records are immutable by default
2. **Conciseness**: Minimal boilerplate code
3. **Type Safety**: Strong typing with compile-time checks
4. **Pattern Matching**: Ready for future Java pattern matching features
5. **Validation**: Works seamlessly with Bean Validation

## Configuration Properties

### DatabaseProperties
- Connection settings with validation
- Nested ConnectionPool and Security records
- Default values for optional properties

### ApiProperties
- API configuration with endpoint definitions
- Rate limiting and timeout configurations
- Collections and maps support

### CacheProperties
- Cache configuration with enum types
- Redis-specific settings
- TTL and size constraints

## Running the Application

```bash
mvn spring-boot:run
```

## Testing Configuration

Access the configuration endpoints:
- http://localhost:8080/api/config/database
- http://localhost:8080/api/config/api
- http://localhost:8080/api/config/cache
- http://localhost:8080/api/config/all

## Validation Examples

The application includes comprehensive validation:
- Required fields (`@NotNull`, `@NotBlank`)
- Size constraints (`@Size`, `@Min`, `@Max`)
- Pattern matching (`@Pattern`)
- Custom validation messages
- Nested object validation (`@Valid`)

## Best Practices Demonstrated

1. Use compact constructors for default values
2. Validate at multiple levels (field and object)
3. Provide meaningful error messages
4. Structure complex configurations with nested records
5. Use enums for constrained values
6. Separate sensitive data in DTOs
7. Include comprehensive unit tests
