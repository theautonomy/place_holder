// pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/>
    </parent>
    <groupId>com.example</groupId>
    <artifactId>validation-demo</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>validation-demo</name>
    <description>Spring Boot Validation Demo</description>
    <properties>
        <java.version>17</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>

// Main Application Class
package com.example.validation;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ValidationDemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(ValidationDemoApplication.class, args);
    }
}

// Custom Validation Annotation
package com.example.validation.annotation;

import com.example.validation.validator.StrongPasswordValidator;
import jakarta.validation.Constraint;
import jakarta.validation.Payload;
import java.lang.annotation.*;

@Documented
@Constraint(validatedBy = StrongPasswordValidator.class)
@Target({ElementType.FIELD})
@Retention(RetentionPolicy.RUNTIME)
public @interface StrongPassword {
    String message() default "Password must contain at least 8 characters, one uppercase, one lowercase, one digit, and one special character";
    Class<?>[] groups() default {};
    Class<? extends Payload>[] payload() default {};
}

// Custom Password Validator
package com.example.validation.validator;

import com.example.validation.annotation.StrongPassword;
import jakarta.validation.ConstraintValidator;
import jakarta.validation.ConstraintValidatorContext;
import java.util.regex.Pattern;

public class StrongPasswordValidator implements ConstraintValidator<StrongPassword, String> {
    
    private static final Pattern PASSWORD_PATTERN = Pattern.compile(
        "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$"
    );
    
    @Override
    public void initialize(StrongPassword constraintAnnotation) {
        // Initialization logic if needed
    }
    
    @Override
    public boolean isValid(String password, ConstraintValidatorContext context) {
        if (password == null) {
            return false;
        }
        return PASSWORD_PATTERN.matcher(password).matches();
    }
}

// Custom Cross-Field Validation Annotation
package com.example.validation.annotation;

import com.example.validation.validator.PasswordMatchValidator;
import jakarta.validation.Constraint;
import jakarta.validation.Payload;
import java.lang.annotation.*;

@Documented
@Constraint(validatedBy = PasswordMatchValidator.class)
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
public @interface PasswordMatch {
    String message() default "Passwords do not match";
    Class<?>[] groups() default {};
    Class<? extends Payload>[] payload() default {};
    
    String password();
    String confirmPassword();
}

// Cross-Field Password Match Validator
package com.example.validation.validator;

import com.example.validation.annotation.PasswordMatch;
import jakarta.validation.ConstraintValidator;
import jakarta.validation.ConstraintValidatorContext;
import org.springframework.beans.BeanWrapperImpl;

public class PasswordMatchValidator implements ConstraintValidator<PasswordMatch, Object> {
    
    private String password;
    private String confirmPassword;
    
    @Override
    public void initialize(PasswordMatch constraintAnnotation) {
        this.password = constraintAnnotation.password();
        this.confirmPassword = constraintAnnotation.confirmPassword();
    }
    
    @Override
    public boolean isValid(Object value, ConstraintValidatorContext context) {
        Object passwordValue = new BeanWrapperImpl(value).getPropertyValue(password);
        Object confirmPasswordValue = new BeanWrapperImpl(value).getPropertyValue(confirmPassword);
        
        if (passwordValue == null && confirmPasswordValue == null) {
            return true;
        }
        
        return passwordValue != null && passwordValue.equals(confirmPasswordValue);
    }
}

// User Entity with Validations
package com.example.validation.entity;

import com.example.validation.annotation.PasswordMatch;
import com.example.validation.annotation.StrongPassword;
import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

@Entity
@Table(name = "users")
@PasswordMatch(password = "password", confirmPassword = "confirmPassword", 
               message = "Password and confirmation password do not match")
public class User {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    // STRING VALIDATION ANNOTATIONS
    @NotBlank(message = "First name is required")
    @Size(min = 2, max = 50, message = "First name must be between 2 and 50 characters")
    @Pattern(regexp = "^[a-zA-Z\\s]*$", message = "First name can only contain letters and spaces")
    @Column(name = "first_name")
    private String firstName;
    
    @NotBlank(message = "Last name is required")
    @Size(min = 2, max = 50, message = "Last name must be between 2 and 50 characters")
    @Pattern(regexp = "^[a-zA-Z\\s]*$", message = "Last name can only contain letters and spaces")
    @Column(name = "last_name")
    private String lastName;
    
    @NotBlank(message = "Email is required")
    @Email(message = "Please provide a valid email address")
    @Column(unique = true)
    private String email;
    
    @NotBlank(message = "Password is required")
    @StrongPassword
    private String password;
    
    @Transient
    private String confirmPassword;
    
    // NUMERIC VALIDATION ANNOTATIONS
    @NotNull(message = "Age is required")
    @Min(value = 18, message = "Age must be at least 18")
    @Max(value = 120, message = "Age must not exceed 120")
    private Integer age;
    
    @Positive(message = "Years of experience must be positive")
    @Column(name = "years_experience")
    private Integer yearsExperience;
    
    @PositiveOrZero(message = "Number of dependents cannot be negative")
    @Column(name = "dependents")
    private Integer dependents;
    
    @Negative(message = "Debt amount should be negative for demonstration")
    private Double debtAmount;
    
    @NegativeOrZero(message = "Account balance deficit should be negative or zero")
    private Double accountDeficit;
    
    // DATE AND TIME VALIDATION ANNOTATIONS
    @Past(message = "Birth date must be in the past")
    @Column(name = "birth_date")
    private LocalDate birthDate;
    
    @PastOrPresent(message = "Employment start date must be in the past or present")
    @Column(name = "employment_start_date")
    private LocalDate employmentStartDate;
    
    @Future(message = "Contract end date must be in the future")
    @Column(name = "contract_end_date")
    private LocalDate contractEndDate;
    
    @FutureOrPresent(message = "Next review date must be in the future or present")
    @Column(name = "next_review_date")
    private LocalDate nextReviewDate;
    
    // DECIMAL AND MONETARY VALIDATION
    @DecimalMin(value = "0.0", inclusive = false, message = "Salary must be greater than 0")
    @DecimalMax(value = "999999.99", message = "Salary cannot exceed 999,999.99")
    @Digits(integer = 6, fraction = 2, message = "Salary format is invalid")
    private BigDecimal salary;
    
    // BOOLEAN VALIDATION
    @NotNull(message = "Active status must be specified")
    @AssertTrue(message = "User must agree to terms and conditions")
    private Boolean agreeToTerms;
    
    @AssertFalse(message = "User account should not be suspended for this operation")
    private Boolean isSuspended;
    
    // COLLECTION VALIDATION
    @NotEmpty(message = "Skills list cannot be empty")
    @Size(min = 1, max = 10, message = "Must have between 1 and 10 skills")
    @ElementCollection
    @CollectionTable(name = "user_skills", joinColumns = @JoinColumn(name = "user_id"))
    @Column(name = "skill")
    private List<@NotBlank(message = "Skill name cannot be blank") 
                  @Size(min = 2, max = 50, message = "Skill name must be between 2 and 50 characters") 
                  String> skills;
    
    // ADDITIONAL STRING VALIDATIONS
    @Pattern(regexp = "^\\+?[1-9]\\d{1,14}$", message = "Please provide a valid phone number")
    @Column(name = "phone_number")
    private String phoneNumber;
    
    @NotEmpty(message = "Username cannot be empty")
    @Size(min = 3, max = 20, message = "Username must be between 3 and 20 characters")
    @Column(unique = true)
    private String username;
    
    // NULL VALIDATION
    @Null(message = "ID should be null when creating a new user")
    @Transient
    private Long tempId;
    
    @Column(name = "created_at")
    private LocalDateTime createdAt;
    
    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now();
    }
    
    // Constructors
    public User() {}
    
    public User(String firstName, String lastName, String email, String password, 
                Integer age, LocalDate birthDate) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.password = password;
        this.age = age;
        this.birthDate = birthDate;
    }
    
    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    
    public String getFirstName() { return firstName; }
    public void setFirstName(String firstName) { this.firstName = firstName; }
    
    public String getLastName() { return lastName; }
    public void setLastName(String lastName) { this.lastName = lastName; }
    
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
    
    public String getConfirmPassword() { return confirmPassword; }
    public void setConfirmPassword(String confirmPassword) { this.confirmPassword = confirmPassword; }
    
    public Integer getAge() { return age; }
    public void setAge(Integer age) { this.age = age; }
    
    public Integer getYearsExperience() { return yearsExperience; }
    public void setYearsExperience(Integer yearsExperience) { this.yearsExperience = yearsExperience; }
    
    public Integer getDependents() { return dependents; }
    public void setDependents(Integer dependents) { this.dependents = dependents; }
    
    public Double getDebtAmount() { return debtAmount; }
    public void setDebtAmount(Double debtAmount) { this.debtAmount = debtAmount; }
    
    public Double getAccountDeficit() { return accountDeficit; }
    public void setAccountDeficit(Double accountDeficit) { this.accountDeficit = accountDeficit; }
    
    public LocalDate getBirthDate() { return birthDate; }
    public void setBirthDate(LocalDate birthDate) { this.birthDate = birthDate; }
    
    public LocalDate getEmploymentStartDate() { return employmentStartDate; }
    public void setEmploymentStartDate(LocalDate employmentStartDate) { this.employmentStartDate = employmentStartDate; }
    
    public LocalDate getContractEndDate() { return contractEndDate; }
    public void setContractEndDate(LocalDate contractEndDate) { this.contractEndDate = contractEndDate; }
    
    public LocalDate getNextReviewDate() { return nextReviewDate; }
    public void setNextReviewDate(LocalDate nextReviewDate) { this.nextReviewDate = nextReviewDate; }
    
    public BigDecimal getSalary() { return salary; }
    public void setSalary(BigDecimal salary) { this.salary = salary; }
    
    public Boolean getAgreeToTerms() { return agreeToTerms; }
    public void setAgreeToTerms(Boolean agreeToTerms) { this.agreeToTerms = agreeToTerms; }
    
    public Boolean getIsSuspended() { return isSuspended; }
    public void setIsSuspended(Boolean isSuspended) { this.isSuspended = isSuspended; }
    
    public List<String> getSkills() { return skills; }
    public void setSkills(List<String> skills) { this.skills = skills; }
    
    public String getPhoneNumber() { return phoneNumber; }
    public void setPhoneNumber(String phoneNumber) { this.phoneNumber = phoneNumber; }
    
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    
    public Long getTempId() { return tempId; }
    public void setTempId(Long tempId) { this.tempId = tempId; }
    
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
}

// User Repository
package com.example.validation.repository;

import com.example.validation.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    boolean existsByEmail(String email);
}

// User Service
package com.example.validation.service;

import com.example.validation.entity.User;
import com.example.validation.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;

@Service
public class UserService {
    
    @Autowired
    private UserRepository userRepository;
    
    public User createUser(User user) {
        if (userRepository.existsByEmail(user.getEmail())) {
            throw new IllegalArgumentException("Email already exists");
        }
        return userRepository.save(user);
    }
    
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }
    
    public Optional<User> getUserById(Long id) {
        return userRepository.findById(id);
    }
    
    public User updateUser(Long id, User userDetails) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("User not found"));
        
        user.setFirstName(userDetails.getFirstName());
        user.setLastName(userDetails.getLastName());
        user.setAge(userDetails.getAge());
        user.setBirthDate(userDetails.getBirthDate());
        user.setPhoneNumber(userDetails.getPhoneNumber());
        user.setSalary(userDetails.getSalary());
        user.setYearsExperience(userDetails.getYearsExperience());
        user.setDependents(userDetails.getDependents());
        user.setEmploymentStartDate(userDetails.getEmploymentStartDate());
        user.setContractEndDate(userDetails.getContractEndDate());
        user.setNextReviewDate(userDetails.getNextReviewDate());
        user.setSkills(userDetails.getSkills());
        user.setUsername(userDetails.getUsername());
        
        return userRepository.save(user);
    }
    
    public void deleteUser(Long id) {
        userRepository.deleteById(id);
    }
}

// Standard Bean Validation Examples Controller
package com.example.validation.controller;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/validation-examples")
@Validated
public class ValidationExamplesController {
    
    // Path Variable Validation
    @GetMapping("/users/{userId}")
    public ResponseEntity<String> getUserById(
            @PathVariable @Min(value = 1, message = "User ID must be greater than 0") Long userId) {
        return ResponseEntity.ok("User ID: " + userId);
    }
    
    // Request Parameter Validation
    @GetMapping("/search")
    public ResponseEntity<String> searchUsers(
            @RequestParam @NotBlank(message = "Search term is required") 
            @Size(min = 3, max = 50, message = "Search term must be between 3 and 50 characters") 
            String term,
            
            @RequestParam(defaultValue = "0") 
            @Min(value = 0, message = "Page number must be non-negative") 
            Integer page,
            
            @RequestParam(defaultValue = "10") 
            @Min(value = 1, message = "Page size must be at least 1")
            @Max(value = 100, message = "Page size cannot exceed 100") 
            Integer size) {
        
        return ResponseEntity.ok(String.format("Searching for '%s', page: %d, size: %d", term, page, size));
    }
    
    // Nested Object Validation Example
    @PostMapping("/address")
    public ResponseEntity<String> validateAddress(@Valid @RequestBody AddressDTO address) {
        return ResponseEntity.ok("Address is valid: " + address.toString());
    }
    
    // Collection Validation Example
    @PostMapping("/batch-emails")
    public ResponseEntity<String> validateEmails(
            @RequestBody @NotEmpty(message = "Email list cannot be empty")
            @Size(max = 10, message = "Cannot process more than 10 emails at once")
            List<@Email(message = "Invalid email format") String> emails) {
        
        return ResponseEntity.ok("Validated " + emails.size() + " emails");
    }
    
    // Multiple Validation Groups Example
    @PostMapping("/user-registration")
    public ResponseEntity<String> registerUser(@Validated(RegistrationGroup.class) @RequestBody UserRegistrationDTO user) {
        return ResponseEntity.ok("User registered successfully");
    }
    
    @PutMapping("/user-update")
    public ResponseEntity<String> updateUser(@Validated(UpdateGroup.class) @RequestBody UserRegistrationDTO user) {
        return ResponseEntity.ok("User updated successfully");
    }
}

// Address DTO for nested validation
package com.example.validation.dto;

import jakarta.validation.constraints.*;

public class AddressDTO {
    
    @NotBlank(message = "Street address is required")
    @Size(max = 100, message = "Street address cannot exceed 100 characters")
    private String street;
    
    @NotBlank(message = "City is required")
    @Size(min = 2, max = 50, message = "City must be between 2 and 50 characters")
    @Pattern(regexp = "^[a-zA-Z\\s]*$", message = "City can only contain letters and spaces")
    private String city;
    
    @NotBlank(message = "State is required")
    @Size(min = 2, max = 2, message = "State must be exactly 2 characters")
    @Pattern(regexp = "^[A-Z]{2}$", message = "State must be two uppercase letters")
    private String state;
    
    @NotBlank(message = "ZIP code is required")
    @Pattern(regexp = "^\\d{5}(-\\d{4})?$", message = "ZIP code must be in format 12345 or 12345-6789")
    private String zipCode;
    
    @NotBlank(message = "Country is required")
    @Size(min = 2, max = 3, message = "Country code must be 2 or 3 characters")
    private String country;
    
    // Constructors, getters, and setters
    public AddressDTO() {}
    
    public String getStreet() { return street; }
    public void setStreet(String street) { this.street = street; }
    
    public String getCity() { return city; }
    public void setCity(String city) { this.city = city; }
    
    public String getState() { return state; }
    public void setState(String state) { this.state = state; }
    
    public String getZipCode() { return zipCode; }
    public void setZipCode(String zipCode) { this.zipCode = zipCode; }
    
    public String getCountry() { return country; }
    public void setCountry(String country) { this.country = country; }
    
    @Override
    public String toString() {
        return String.format("%s, %s, %s %s, %s", street, city, state, zipCode, country);
    }
}

// Validation Groups
package com.example.validation.groups;

public interface RegistrationGroup {}

package com.example.validation.groups;

public interface UpdateGroup {}

// User Registration DTO with Validation Groups
package com.example.validation.dto;

import com.example.validation.groups.RegistrationGroup;
import com.example.validation.groups.UpdateGroup;
import jakarta.validation.constraints.*;
import java.math.BigDecimal;
import java.time.LocalDate;

public class UserRegistrationDTO {
    
    @NotNull(groups = UpdateGroup.class, message = "ID is required for updates")
    @Null(groups = RegistrationGroup.class, message = "ID must be null for registration")
    private Long id;
    
    @NotBlank(groups = {RegistrationGroup.class, UpdateGroup.class}, message = "Username is required")
    @Size(min = 3, max = 20, groups = {RegistrationGroup.class, UpdateGroup.class}, 
          message = "Username must be between 3 and 20 characters")
    @Pattern(regexp = "^[a-zA-Z0-9_]*$", groups = {RegistrationGroup.class, UpdateGroup.class},
             message = "Username can only contain letters, numbers, and underscores")
    private String username;
    
    @NotBlank(groups = RegistrationGroup.class, message = "Password is required for registration")
    @Size(min = 8, groups = RegistrationGroup.class, message = "Password must be at least 8 characters")
    private String password;
    
    @NotBlank(groups = {RegistrationGroup.class, UpdateGroup.class}, message = "Email is required")
    @Email(groups = {RegistrationGroup.class, UpdateGroup.class}, message = "Please provide a valid email")
    private String email;
    
    @NotNull(groups = {RegistrationGroup.class, UpdateGroup.class}, message = "Age is required")
    @Min(value = 18, groups = {RegistrationGroup.class, UpdateGroup.class}, message = "Must be at least 18 years old")
    @Max(value = 120, groups = {RegistrationGroup.class, UpdateGroup.class}, message = "Age cannot exceed 120")
    private Integer age;
    
    @Past(groups = {RegistrationGroup.class, UpdateGroup.class}, message = "Birth date must be in the past")
    private LocalDate birthDate;
    
    @DecimalMin(value = "0.0", inclusive = false, groups = UpdateGroup.class, 
                message = "Salary must be greater than 0")
    private BigDecimal salary;
    
    // Constructors, getters, and setters
    public UserRegistrationDTO() {}
    
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
    
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    public Integer getAge() { return age; }
    public void setAge(Integer age) { this.age = age; }
    
    public LocalDate getBirthDate() { return birthDate; }
    public void setBirthDate(LocalDate birthDate) { this.birthDate = birthDate; }
    
    public BigDecimal getSalary() { return salary; }
    public void setSalary(BigDecimal salary) { this.salary = salary; }
}

import com.example.validation.entity.User;
import com.example.validation.service.UserService;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/users")
public class UserController {
    
    @Autowired
    private UserService userService;
    
    @PostMapping
    public ResponseEntity<?> createUser(@Valid @RequestBody User user, BindingResult result) {
        if (result.hasErrors()) {
            Map<String, String> errors = new HashMap<>();
            result.getAllErrors().forEach(error -> {
                String fieldName = ((FieldError) error).getField();
                String message = error.getDefaultMessage();
                errors.put(fieldName, message);
            });
            return ResponseEntity.badRequest().body(errors);
        }
        
        try {
            User savedUser = userService.createUser(user);
            return ResponseEntity.status(HttpStatus.CREATED).body(savedUser);
        } catch (IllegalArgumentException e) {
            Map<String, String> error = new HashMap<>();
            error.put("email", e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }
    
    @GetMapping
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userService.getAllUsers();
        return ResponseEntity.ok(users);
    }
    
    @GetMapping("/{id}")
    public ResponseEntity<User> getUserById(@PathVariable Long id) {
        return userService.getUserById(id)
                .map(user -> ResponseEntity.ok(user))
                .orElse(ResponseEntity.notFound().build());
    }
    
    @PutMapping("/{id}")
    public ResponseEntity<?> updateUser(@PathVariable Long id, 
                                       @Valid @RequestBody User userDetails,
                                       BindingResult result) {
        if (result.hasErrors()) {
            Map<String, String> errors = new HashMap<>();
            result.getAllErrors().forEach(error -> {
                String fieldName = ((FieldError) error).getField();
                String message = error.getDefaultMessage();
                errors.put(fieldName, message);
            });
            return ResponseEntity.badRequest().body(errors);
        }
        
        try {
            User updatedUser = userService.updateUser(id, userDetails);
            return ResponseEntity.ok(updatedUser);
        } catch (RuntimeException e) {
            return ResponseEntity.notFound().build();
        }
    }
    
    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
        userService.deleteUser(id);
        return ResponseEntity.noContent().build();
    }
}

// Global Exception Handler
package com.example.validation.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import java.util.HashMap;
import java.util.Map;

@ControllerAdvice
public class GlobalExceptionHandler {
    
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String, String>> handleValidationExceptions(
            MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((org.springframework.validation.FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        return new ResponseEntity<>(errors, HttpStatus.BAD_REQUEST);
    }
    
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<Map<String, String>> handleIllegalArgumentException(
            IllegalArgumentException ex) {
        Map<String, String> error = new HashMap<>();
        error.put("error", ex.getMessage());
        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
    }
}

// Application Properties
# src/main/resources/application.properties
spring.application.name=validation-demo
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true


## **Complete Standard Bean Validation Annotations Coverage:**

### **1. String Validation:**
- `@NotBlank` - Field cannot be null, empty, or whitespace only
- `@NotEmpty` - Field cannot be null or empty (but can be whitespace)
- `@Size(min, max)` - String length constraints
- `@Pattern(regexp)` - Regex pattern matching
- `@Email` - Email format validation

### **2. Numeric Validation:**
- `@NotNull` - Field cannot be null
- `@Min(value)` - Minimum numeric value
- `@Max(value)` - Maximum numeric value
- `@Positive` - Must be positive (> 0)
- `@PositiveOrZero` - Must be positive or zero (>= 0)
- `@Negative` - Must be negative (< 0)
- `@NegativeOrZero` - Must be negative or zero (<= 0)

### **3. Decimal/Financial Validation:**
- `@DecimalMin` - Minimum decimal value with precision
- `@DecimalMax` - Maximum decimal value with precision
- `@Digits(integer, fraction)` - Numeric format validation

### **4. Date/Time Validation:**
- `@Past` - Date must be in the past
- `@PastOrPresent` - Date must be in past or present
- `@Future` - Date must be in the future
- `@FutureOrPresent` - Date must be in future or present

### **5. Boolean Validation:**
- `@AssertTrue` - Must be true
- `@AssertFalse` - Must be false

### **6. Collection Validation:**
- `@NotEmpty` - Collection cannot be empty
- `@Size` - Collection size constraints
- Element validation with `@Valid` and nested constraints

### **7. Null Validation:**
- `@Null` - Field must be null
- `@NotNull` - Field cannot be null

## **Advanced Features Added:**

### **1. Method Parameter Validation:**
```java
@GetMapping("/users/{userId}")
public ResponseEntity<String> getUserById(
    @PathVariable @Min(value = 1, message = "User ID must be greater than 0") Long userId)
```

### **2. Request Parameter Validation:**
```java
@GetMapping("/search")
public ResponseEntity<String> searchUsers(
    @RequestParam @NotBlank @Size(min = 3, max = 50) String term,
    @RequestParam @Min(0) Integer page)
```

### **3. Collection Element Validation:**
```java
List<@Email(message = "Invalid email format") String> emails
```

### **4. Validation Groups:**
```java
@Validated(RegistrationGroup.class) // Different validation rules for registration
@Validated(UpdateGroup.class)       // Different validation rules for updates
```

### **5. Nested Object Validation:**
```java
@Valid @RequestBody AddressDTO address // Validates nested object properties
```

## **Test Examples:**

### **Valid Request:**
```bash
curl -X POST http://localhost:8080/api/users \
-H "Content-Type: application/json" \
-d '{
  "firstName": "John",
  "lastName": "Doe", 
  "email": "john@example.com",
  "password": "StrongPass123!",
  "confirmPassword": "StrongPass123!",
  "username": "johndoe",
  "age": 25,
  "birthDate": "1998-01-01",
  "yearsExperience": 3,
  "dependents": 0,
  "employmentStartDate": "2022-01-01",
  "contractEndDate": "2025-12-31",
  "nextReviewDate": "2024-12-01",
  "salary": 75000.50,
  "agreeToTerms": true,
  "isSuspended": false,
  "skills": ["Java", "Spring Boot", "REST APIs"],
  "phoneNumber": "+1234567890"
}'
```

### **Parameter Validation Test:**
```bash
curl "http://localhost:8080/api/validation-examples/search?term=ab&page=-1&size=150"
# Will trigger validation errors for term too short, negative page, and size too large
```

### **Collection Validation Test:**
```bash
curl -X POST http://localhost:8080/api/validation-examples/batch-emails \
-H "Content-Type: application/json" \
-d '["valid@email.com", "invalid-email", "another@valid.com"]'
# Will trigger validation error for the invalid email format
```

