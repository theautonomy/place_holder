 <textarea id="searchInput"
                              name="query" 
                              placeholder="Enter your search query...&#10;&#10;You can write multiple lines or paragraphs to describe what you're looking for in detail." 
                              rows="4"
                              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-all duration-200 resize-y min-h-[100px]"
                              required></textarea>
///
https://api.openai.com/v1/chat/completions

{
  "messages": [
    {
      "content": "You are a helpful assistant writing in formal English",
      "role": "system"
    },
    {
      "content": "What are the 10 best movies of all time?",
      "role": "user"
    }
  ],
  "model": "gpt-4o",
  "stream": false,
  "temperature": 0.7
}

{
  "id": "chatcmpl-Bc9QMZMoO4bOhQInNGTuDJJnd2pRl",
  "object": "chat.completion",
  "created": 1748432390,
  "model": "gpt-4o-2024-08-06",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "Determining the \"best\" movies of all time is subjective and often varies based on personal taste, cultural impact, and critical acclaim. However, several films are frequently cited in lists by critics, filmmakers, and audiences. Here are ten films that are often considered among the greatest:\n\n1. **Citizen Kane (1941)** - Directed by Orson Welles, this film is renowned for its innovative storytelling techniques and cinematography.\n   \n2. **The Godfather (1972)** - Directed by Francis Ford Coppola, this classic crime film is celebrated for its powerful narrative and performances, particularly by Marlon Brando and Al Pacino.\n\n3. **Casablanca (1942)** - Directed by Michael Curtiz, this romantic drama set during World War II is beloved for its memorable dialogue and iconic performances by Humphrey Bogart and Ingrid Bergman.\n\n4. **Schindler's List (1993)** - Directed by Steven Spielberg, this historical drama about the Holocaust is praised for its emotional depth and powerful storytelling.\n\n5. **Lawrence of Arabia (1962)** - Directed by David Lean, this epic film is known for its stunning cinematography and the compelling performance of Peter O'Toole.\n\n6. **The Shawshank Redemption (1994)** - Directed by Frank Darabont, this film about hope and friendship is a favorite among audiences and consistently ranks highly on viewer polls.\n\n7. **Pulp Fiction (1994)** - Directed by Quentin Tarantino, this film is celebrated for its innovative narrative structure and memorable dialogue.\n\n8. **Gone with the Wind (1939)** - Directed by Victor Fleming, this epic historical romance is notable for its grandeur and the performance of Vivien Leigh as Scarlett O'Hara.\n\n9. **The Godfather Part II (1974)** - Also directed by Francis Ford Coppola, this sequel is often hailed as one of the few films that match or surpass the original in quality.\n\n10. **Star Wars: Episode IV - A New Hope (1977)** - Directed by George Lucas, this film revolutionized the science fiction genre and became a cultural phenomenon.\n\nThese selections are based on critical acclaim, influence, and popularity over the years. Preferences may vary, and there are many other films that could be considered among the best.",
        "refusal": null,
        "annotations": []
      },
      "logprobs": null,
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 31,
    "completion_tokens": 463,
    "total_tokens": 494,
    "prompt_tokens_details": {
      "cached_tokens": 0,
      "audio_tokens": 0
    },
    "completion_tokens_details": {
      "reasoning_tokens": 0,
      "audio_tokens": 0,
      "accepted_prediction_tokens": 0,
      "rejected_prediction_tokens": 0
    }
  },
  "service_tier": "default",
  "system_fingerprint": "fp_76544d79cb"
}
///
Properties props = PropertiesLoaderUtils.loadAllProperties("my.properties");
PropertyPlaceholderConfigurer props2 = new PropertyPlaceholderConfigurer();
props2.setProperties(props);

 public static void loadProperties(GenericApplicationContext context, String filePath, boolean isYaml) throws IOException {
        Properties properties = new Properties();

        if (isYaml) {
             YamlPropertiesFactoryBean factory = new YamlPropertiesFactoryBean();
            factory.setResources(new ClassPathResource(filePath));
            factory.afterPropertiesSet();
            properties = factory.getObject();
        } else {
            properties.load(new ClassPathResource(filePath).getInputStream());
        }
        
        PropertiesPropertySource propertySource = new PropertiesPropertySource("myProperties", properties);
        context.getEnvironment().getPropertySources().addFirst(propertySource);
    }
///

@Autowired
    private ConfigurableEnvironment environment;
    
    public void loadProperties(String configName) throws IOException {
        ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();
        Resource[] resources = resourcePatternResolver.getResources("classpath:/config/" + configName + ".properties");
    
        if (resources.length > 0) {
            PropertiesPropertySourceLoader loader = new PropertiesPropertySourceLoader();
            for (Resource resource : resources) {
                PropertySource<?> propertySource = loader.load("myProperties", resource);
                environment.getPropertySources().addFirst(propertySource);
            }
        }
    }
////

WebClient/NettyReactor
* https://docs.spring.io/spring-framework/docs/6.0.6/reference/html/web-reactive.html#webflux-client
* https://docs.spring.io/projectreactor/reactor-netty/docs/current/reference/html/#_connection_pool_2

The max-in-memory-size property in Spring WebClient controls the maximum amount of data that can be buffered in memory when receiving a response. By default, this is set to 256KB. If the response exceeds this limit, a DataBufferLimitException is thrown.


/////
@Autowired
    private Environment environment;

    public void addRuntimeProperty(String name, String value) {
        MutablePropertySources propertySources = ((AbstractEnvironment) environment).getPropertySources();
        Map<String, Object> myProperties = new HashMap<>();
        myProperties.put(name, value);
         MapPropertySource myPropertySource = new MapPropertySource("dynamicPropertySource", myProperties);
        propertySources.addFirst(myPropertySource);
    }

/////
https://datatracker.ietf.org/doc/html/rfc6749
https://openid.net/specs/openid-connect-core-1_0.html

https://github.com/search?q=repo%3Aspring-projects%2Fspring-security%20baseurl&type=code


https://www.sivalabs.in/spring-security-oauth2-tutorial-introduction/
https://github.com/sivaprasadreddy/spring-security-oauth2-microservices-demo/tree/main


https://dev-xxxxx.okta.com/oauth2/default/v1/authorize?response_type=code&scope=photos&client_id=xxxxxx&redirect_uri=https://example-app.com/redirect&state=1234
curl https://dev-9746866.okta.com/oauth2/default/v1/token -d grant_type=authorization_code -d client_id=xxxxx -d client_secret=xxxxx -d code=xxxxx -d redirect_uri=https://example-app.com/redirect
{"token_type":"Bearer","expires_in":3600,"access_token":
"token-xxxxx","scope":"photos"}

oauth
An open standard for authorization
OAuth doesn’t tell the app who logged in

/////

* https://hbr.org/2024/05/ai-will-increase-the-quantity-and-quality-of-phishing-scams

AI tools are rapidly making these emails more advanced, harder to spot, and significantly more dangerous.

The entire phishing process can be automated using LLMs, which reduces the costs of phishing attacks by more than 95% while achieving equal or greater success rates

Phishing has five distinct phases: collecting targets, collecting information about the targets, creating emails, sending emails, and finally validating and improving the emails. With the ability to generate human-like text and converse coherently, large language models (LLMs), such as ChatGPT and Claude, can be used to automate each phase.

expect phishing to increase drastically in quality and quantity over the coming years.


Using LLMs to create phishing emails

    two types of phishing emails: spear phishing and traditional phishing 

    Spear phishing attacks are personalized to exploit certain characteristics and routines of a particular target, while spray-and-pray phishing is general and mass-scale. Spear phishing attacks are expensive, time-consuming, and don’t scale well, as they are individualized for each recipient, but they are highly effective. Thus, attackers can choose between cheap and ineffective or expensive and effective.

    artificial intelligence changes this playing field by drastically reducing the cost of spear phishing attacks, while maintaining or even increasing their success rate. The output quality of language models is improving rapidly, so we expect them to surpass human capability within the coming years. Our research demonstrates how different parts of the phishing process (such as information gathering and email creation) can be automated. By fully automating all parts of the phishing process, the cost of personalized and highly successful phishing attacks is reduced to the cost of mass-scale and non-personalized emails.


    we will face a vast increase in credible and hyper-personalized spear-phishing emails that are cheap for attackers to scale up en masse.

Using LLMs to detect phishing emails

How businesses should prepare themselves

To address the growing concern of AI-enabled spear phishing attacks, we recommend three checkpoints for business leaders, managers, and security officials:

    Understand the asymmetrical capabilities of AI-enhanced phishing.
    Determine the company or division’s phishing threat severity level.
    Confirm your current phishing awareness routines.

Artificial intelligence, and LLMs in particular, are significantly enhancing the severity of phishing attacks, and we can expect a sharp increase in both the quality and quantity of phishing in the years to come. When targeting human users, AI disproportionately benefits attackers by making it easier and more cost-effective to exploit psychological vulnerabilities than to defend and educate users. Most employees have a digital footprint with publicly available information that makes it easy to impersonate them and create tailored attacks. Therefore, phishing is evolving from mere emails to a plethora of hyper-personalized messages, including falsified voice and video.

Managers must correctly classify the threat level of their organization and department to take appropriate action. By raising employee awareness about this emerging threat and equipping them to accurately assess the risk to themselves and their organization, companies can aspire to stay ahead of the curve and mitigate the next generation of phishing attacks, which will claim more victims than ever before.

* https://www.securityweek.com/cyber-insights-2024-artificial-intelligence/

2023, however, saw the emergence and general availability of large language model (LLM) AI, commonly known as gen-AI; with ChatGPT being the iconic frontrunner. AI is now front and center for everyone.

Phishing

Phishing is the cyber threat most discussed by security professionals and the media. There is little doubt that gen-AI can provide the means to supercharge attacks: word-perfect, multi-lingual, and super-scaled.

There is more room for doubt, however, whether this is already happening, or will happen in 2024. Shikiar believes it has started, with more than half the population believing there has been an increase in the volume and an improvement in the sophistication of attacks.

adds Matt Waxman, SVP and GM for data protection at Veritas Technologies, “Tools like WormGPT make it easy for attackers to improve their social engineering with AI-generated phishing emails that are much more convincing than those we’ve previously learned to spot.” 

Deepfakes: phishing’s video and voice accessory
 the inclusion of AI-generated voice and video into targeted spear-phishing and BEC will make attacks far more believable. 

 Social engineering is already the cause of the majority of attacks, and now any fraudster, anywhere in the world, can generate word-perfect phishing attacks that are near-impossible to detect — at a fraction of the effort of creating a deepfake

 * https://www.securityweek.com/the-emerging-landscape-of-ai-driven-cybersecurity-threats-a-look-ahead/

 highly tailored phishing lures,

 * https://computronixusa.com/top-5-cybersecurity-threats-in-2024/
 AI-Enhanced Phishing Schemes

Deception has reached new heights in cybercrime as AI-powered phishing schemes become increasingly sophisticated, directly threatening your organization’s security. These ai-enhanced phishing schemes leverage the use of AI to craft convincing messages that can trick even the most vigilant users.

Here’s what you need to watch out for:

-- AI-Enhanced Phishing Schemes

    Utilize machine learning to personalize attacks
    Exploit access to platforms for large-scale distribution
    Mimic trusted sources with alarming accuracy

To mitigate these risks, reinforce your defenses against sophisticated ransomware tools and adapt to the diversity in operating systems within your network. Educate your team on the nuances of these threats and ensure they’re equipped to recognize and respond to them.

Stay vigilant and proactive to protect your digital landscape.

-- Malicious AI Narrative Crafting

Cybercriminals are harnessing artificial intelligence to craft narratives that convincingly mimic legitimate communications, further complicating your defense against these stealthy cyberattacks. AI poses a significant challenge as it’s used in generating sophisticated ransomware tools and attack vectors using AI. You must be proactive to safeguard against emerging threats that are becoming more nuanced.

--AI-Exploit Rapid Development

With hackers’ adoption of AI-powered tools, your organization’s defenses are facing unprecedented challenges in detecting and countering rapid exploit development. AI’s ability to generate sophisticated threats at an alarming rate means you must be vigilant and proactive.

AI-Powered Cyberattacks:

    Speed: AI accelerates the creation of malware, outpacing traditional security measures.
    Variety: A range of attacks, from software supply chain attacks to data breaches, are now more complex.
    Evasion: AI-driven threats can sidestep detection systems, making prevention increasingly difficult.

Understand that AI isn’t just a tool for innovation but also a weapon for cybercriminals. Your strategy must adapt to anticipate and mitigate these evolving threats. Secure your organization by staying ahead of the AI threat curve.

* https://fightcybercrime.org/blog/the-rise-of-ai-in-phishing-scams-how-scammers-use-it-and-how-we-can-fight-back/

AI-Powered Phishing Scams
  Spear Phishing
  Deepfakes
  Chatbots

AI-Powered Phishing Detection
  Machine learning
  Natural Language Processing (NLP)
  User Behavior Analysis

AI has the potential to both improve and disrupt phishing scams. Scammers can use AI to automate various aspects of a phishing attack, making them more effective and targeted. However, AI can also be used to detect and prevent phishing attacks by analyzing user behavior, email content and other features. As AI continues to evolve, it is likely that we will see more sophisticated phishing scams emerge, but we will also see more effective detection and prevention techniques developed. It is important to stay vigilant and be aware of the latest phishing scams and detection techniques to protect yourself and your organization.


////

// BeanInfo.java
public class BeanInfo {
    private String name;
    private String type;

    public BeanInfo(String name, String type) {
        this.name = name;
        this.type = type;
    }

    // Getters and setters
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }
}



// BeanInfoService.java
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@Service
public class BeanInfoService {
  
    private final ApplicationContext applicationContext;

    public BeanInfoService(ApplicationContext applicationContext) {
        this.applicationContext = applicationContext;
    }

    public List<BeanInfo> getAllBeans() {
        String[] beanNames = applicationContext.getBeanDefinitionNames();
        Arrays.sort(beanNames);
        List<BeanInfo> beanInfos = new ArrayList<>();

        for (String beanName : beanNames) {
            Object bean = applicationContext.getBean(beanName);
            BeanInfo beanInfo = new BeanInfo(beanName, bean.getClass().getName());
            beanInfos.add(beanInfo);
        }
        return beanInfos;
    }
}


// BeanController.java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

import java.util.List;

@Controller
public class BeanController {

    @Autowired
    private BeanInfoService beanInfoService;

    @GetMapping("/")
    public String index() {
        return "index";
    }

    @GetMapping("/beans")
    public String getBeansFragment(Model model) {
        List<BeanInfo> beans = beanInfoService.getAllBeans();
        model.addAttribute("beans", beans);
        return "fragments/beans :: beansList";
    }
}

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" xmlns:htmx="http://htmx.org">
<head>
    <title>Spring Beans</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://unpkg.com/htmx.org@1.3.3"></script>
</head>
<body>
    <div class="container">
        <h1>Spring Beans List</h1>
        <button class="btn btn-primary" hx-get="/beans" hx-target="#beansList" hx-trigger="click">Load Beans</button>
        <div id="beansList">
            <!-- Beans list will be loaded here -->
        </div>
    </div>
</body>
</html>


<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Beans Fragment</title>
</head>
<body>
    <div th:fragment="beansList">
        <table class="table">
            <thead>
                <tr>
                    <th>Bean Name</th>
                    <th>Type</th>
                </tr>
            </thead>
            <tbody>
                <tr th:each="bean : ${beans}">
                    <td th:text="${bean.name}"></td>
                    <td th:text="${bean.type}"></td>
                </tr>
            </tbody>
        </table>
    </div>
</body>
</html>

///
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" xmlns:htmx="http://htmx.org">
<head>
    <title>Spring Beans</title>
    <link href="/css/tailwind.build.css" rel="stylesheet">
    <script src="https://unpkg.com/htmx.org@1.3.3"></script>
</head>
<body class="bg-gray-100 font-sans leading-normal tracking-normal">
    <div class="container mx-auto my-8 p-8 bg-white shadow-lg rounded-lg">
        <h1 class="text-3xl font-bold mb-4">Spring Beans List</h1>
        <button class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700" 
                hx-get="/beans" hx-target="#beansList" hx-trigger="click">
            Load Beans
        </button>
        <div id="beansList" class="mt-4">
            <!-- Beans list will be loaded here -->
        </div>
    </div>
</body>
</html>

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Beans Fragment</title>
</head>
<body>
    <div th:fragment="beansList">
        <table class="min-w-full bg-white">
            <thead>
                <tr>
                    <th class="py-2">Bean Name</th>
                    <th class="py-2">Type</th>
                </tr>
            </thead>
            <tbody>
                <tr th:each="bean : ${beans}" class="hover:bg-gray-50">
                    <td th:text="${bean.name}" class="py-2 px-4 border-b"></td>
                    <td th:text="${bean.type}" class="py-2 px-4 border-b"></td>
                </tr>
            </tbody>
        </table>
    </div>
</body>
</html>

///
public class BeanInfo {
    private String name;
    private String type;
    private String shortName;
    private String shortType;

    public BeanInfo(String name, String type) {
        this.name = name;
        this.type = type;
        this.shortName = shortenName(name);
        this.shortType = shortenType(type);
    }

    // Getters and setters
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getShortName() {
        return shortName;
    }

    public String getShortType() {
        return shortType;
    }

    // Helper methods to shorten name and type
    private String shortenName(String name) {
        if (name.length() > 20) {
            return name.substring(0, 17) + "...";
        }
        return name;
    }

    private String shortenType(String type) {
        String[] parts = type.split("\\.");
        if (parts.length > 2) {
            return parts[0] + "." + parts[1] + "...";
        }
        return type;
    }
}

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" xmlns:htmx="http://htmx.org">
<head>
    <title>Spring Beans</title>
    <link href="/css/tailwind.build.css" rel="stylesheet">
    <script src="https://unpkg.com/htmx.org@1.3.3"></script>
</head>
<body class="bg-gray-100 font-sans leading-normal tracking-normal">
    <div class="container mx-auto my-8 p-8 bg-white shadow-lg rounded-lg">
        <h1 class="text-3xl font-bold mb-4">Spring Beans List</h1>
        <button class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700" 
                hx-get="/beans" hx-target="#beansList" hx-trigger="click">
            Load Beans
        </button>
        <div id="beansList" class="mt-4">
            <!-- Beans list will be loaded here -->
        </div>
    </div>
</body>
</html>


<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Beans Fragment</title>
</head>
<body>
    <div th:fragment="beansList">
        <table class="min-w-full bg-white">
            <thead>
                <tr>
                    <th class="py-2">Bean Name</th>
                    <th class="py-2">Type</th>
                </tr>
            </thead>
            <tbody>
                <tr th:each="bean : ${beans}" class="hover:bg-gray-50">
                    <td th:text="${bean.shortName}" class="py-2 px-4 border-b"></td>
                    <td th:text="${bean.shortType}" class="py-2 px-4 border-b"></td>
                </tr>
            </tbody>
        </table>
    </div>
</body>
</html>

///
public class BeanInfo {
    private String name;
    private String type;
    private String simpleName;
    private String simpleType;

    public BeanInfo(String name, String type) {
        this.name = name;
        this.type = type;
        this.simpleName = name;
        this.simpleType = extractSimpleName(type);
    }

    // Getters and setters
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getSimpleName() {
        return simpleName;
    }

    public String getSimpleType() {
        return simpleType;
    }

    // Helper method to extract simple class name from fully qualified type name
    private String extractSimpleName(String type) {
        if (type == null) {
            return null;
        }
        int lastDotIndex = type.lastIndexOf('.');
        return (lastDotIndex != -1) ? type.substring(lastDotIndex + 1) : type;
    }
}


////
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class DadJokeService {
  
    private static final String DAD_JOKE_API_URL = "https://icanhazdadjoke.com/";
    
    public String getRandomDadJoke() {
        RestTemplate restTemplate = new RestTemplate();
        return restTemplate.getForObject(DAD_JOKE_API_URL, String.class);
    }
}

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class DadJokeController {

    @Autowired
    private DadJokeService dadJokeService;

    @GetMapping("/")
    public String index() {
        return "index";
    }

    @GetMapping("/joke")
    public String getJokeFragment(Model model) {
        String joke = dadJokeService.getRandomDadJoke();
        model.addAttribute("joke", joke);
        return "fragments/joke :: jokeFragment";
    }
}


<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" xmlns:htmx="http://htmx.org">
<head>
    <title>Dad Jokes</title>
    <link href="/css/tailwind.build.css" rel="stylesheet">
    <script src="https://unpkg.com/htmx.org@1.3.3"></script>
</head>
<body class="bg-gray-100 font-sans leading-normal tracking-normal">
    <div class="container mx-auto my-8 p-8 bg-white shadow-lg rounded-lg text-center">
        <h1 class="text-3xl font-bold mb-4">Dad Joke Generator</h1>
        <button class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700"
                hx-get="/joke" hx-target="#jokeContainer" hx-trigger="click">
            Get a New Joke
        </button>
        <div id="jokeContainer" class="mt-4 text-lg text-gray-700">
            <!-- Joke will be loaded here -->
        </div>
    </div>
</body>
</html>


<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Joke Fragment</title>
</head>
<body>
    <div th:fragment="jokeFragment">
        <p th:text="${joke}"></p>
    </div>
</body>
</html>

///

import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;

@Service
public class DadJokeService {

    private static final String DAD_JOKE_IMAGE_API_URL = "https://icanhazdadjoke.com/";

    public String getRandomDadJokeImage() {
        RestTemplate restTemplate = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.set("Accept", "image/png");
        HttpEntity<String> entity = new HttpEntity<>(headers);

        ResponseEntity<byte[]> response = restTemplate.exchange(DAD_JOKE_IMAGE_API_URL, HttpMethod.GET, entity, byte[].class);

        String base64Image = org.springframework.util.Base64Utils.encodeToString(response.getBody());
        return "data:image/png;base64," + base64Image;
    }
}


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class DadJokeController {

    @Autowired
    private DadJokeService dadJokeService;

    @GetMapping("/")
    public String index() {
        return "index";
    }

    @GetMapping("/joke")
    public String getJokeFragment(Model model) {
        String jokeImage = dadJokeService.getRandomDadJokeImage();
        model.addAttribute("jokeImage", jokeImage);
        return "fragments/joke :: jokeFragment";
    }
}

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" xmlns:htmx="http://htmx.org">
<head>
    <title>Dad Jokes</title>
    <link href="/css/tailwind.build.css" rel="stylesheet">
    <script src="https://unpkg.com/htmx.org@1.3.3"></script>
</head>
<body class="bg-gray-100 font-sans leading-normal tracking-normal">
    <div class="container mx-auto my-8 p-8 bg-white shadow-lg rounded-lg text-center">
        <h1 class="text-3xl font-bold mb-4">Dad Joke Generator</h1>
        <button class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700"
                hx-get="/joke" hx-target="#jokeContainer" hx-trigger="click">
            Get a New Joke
        </button>
        <div id="jokeContainer" class="mt-4">
            <!-- Joke will be loaded here -->
        </div>
    </div>
</body>
</html>

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Joke Fragment</title>
</head>
<body>
    <div th:fragment="jokeFragment">
        <img th:src="${jokeImage}" class="mx-auto mt-4">
    </div>
</body>
</html>

import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;
import org.thymeleaf.templateresolver.ClassLoaderTemplateResolver;

public class ThymeleafExample {

    public static void main(String[] args) {
        // Create a TemplateEngine instance and configure it
        ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver();
        templateResolver.setPrefix("templates/");
        templateResolver.setSuffix(".html");
        templateResolver.setTemplateMode("HTML");

        TemplateEngine templateEngine = new TemplateEngine();
        templateEngine.setTemplateResolver(templateResolver);

        // Create the data for the report
        Context context = new Context();
        context.setVariable("reportData", new ReportData("Sample Report", "This is a sample content for the report."));

        // Process the template and generate the final HTML
        String htmlContent = templateEngine.process("report", context);
        System.out.println(htmlContent);
    }
}

class ReportData {
    private String title;
    private String content;

    public ReportData(String title, String content) {
        this.title = title;
        this.content = content;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }
}


///

import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;
import org.thymeleaf.templateresolver.StringTemplateResolver;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class ThymeleafExample {

    public static void main(String[] args) {
        // Read the template content into a string
        String templateContent;
        try {
            templateContent = new String(Files.readAllBytes(Paths.get("templates/report.html")));
        } catch (IOException e) {
            e.printStackTrace();
            return;
        }

        // Create a TemplateEngine instance and configure it with StringTemplateResolver
        StringTemplateResolver templateResolver = new StringTemplateResolver();
        TemplateEngine templateEngine = new TemplateEngine();
        templateEngine.setTemplateResolver(templateResolver);

        // Create the data for the report
        Context context = new Context();
        context.setVariable("reportData", new ReportData("Sample Report", "This is a sample content for the report."));

        // Process the template content directly
        String htmlContent = templateEngine.process(templateContent, context);
        System.out.println(htmlContent);
    }
}

class ReportData {
    private String title;
    private String content;

    public ReportData(String title, String content) {
        this.title = title;
        this.content = content;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }
}

////

 <dependency>
            <groupId>gg.jte</groupId>
            <artifactId>jte</artifactId>
            <version>3.1.12</version>
        </dependency>


   <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>gg.jte</groupId>
                <artifactId>jte-maven-plugin</artifactId>
                <version>3.1.12</version>
                <executions>
                    <execution>
                        <id>jte-generate</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <sourceDirectory>${project.basedir}/src/main/jte</sourceDirectory>
                            <contentType>Html</contentType>
                            <binaryStaticContent>true</binaryStaticContent>
                            <targetResourceDirectory>${project.build.outputDirectory}</targetResourceDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

gg.jte.usePrecompiledTemplates=${GG_JTE_USE_PRECOMPILED_TEMPLATES:false}
gg.jte.developmentMode=${GG_JTE_DEVELOPMENT_TEMPLATES:true}


////
<dependency>
    <groupId>com.itextpdf</groupId>
    <artifactId>itextpdf</artifactId>
    <version>5.5.13.3</version>
</dependency>


 public byte[] generatePdf() throws Exception {
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        Document document = new Document();
        PdfWriter.getInstance(document, outputStream);
        document.open();
        document.add(new Paragraph("Hello, this is a PDF!"));
        document.close();
        return outputStream.toByteArray();
    }


 public void sendEmailWithAttachment(String to, String subject, String body, byte[] attachment) throws MessagingException {
        MimeMessage message = javaMailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(message, true);
        helper.setTo(to);
        helper.setSubject(subject);
        helper.setText(body);

        helper.addAttachment("attachment.pdf", new ByteArrayResource(attachment));
        javaMailSender.send(message);
    }

////
The Jakarta Mail API and the Angus Mail implementation work together in the following way:

1. **Jakarta Mail API**: The Jakarta Mail API is a standard Java API for sending and receiving email. It provides a high-level abstraction for working with email, including features for creating, sending, and parsing email messages.

2. **Angus Mail Implementation**: Angus Mail is an open-source implementation of the Jakarta Mail API. It provides a complete implementation of the Jakarta Mail API, allowing developers to use the standard Jakarta Mail API in their applications.

When you use the Jakarta Mail API in your application, you don't need to worry about the underlying implementation. The Jakarta Mail API is designed to be provider-agnostic, meaning that you can use different implementations of the API without having to change your code.

To use the Angus Mail implementation with the Jakarta Mail API, you need to include the Angus Mail library in your application's classpath. This is typically done by adding a dependency to your build configuration (e.g., in your `pom.xml` file for a Maven-based project).

Once the Angus Mail library is available, the Jakarta Mail API will automatically use the Angus Mail implementation to handle email-related tasks, such as sending and receiving email messages.

Here's an example of how you might use the Jakarta Mail API with the Angus Mail implementation:

```java
import jakarta.mail.Message;
import jakarta.mail.Session;
import jakarta.mail.Transport;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;

import java.util.Properties;

public class MailSender {
    public static void main(String[] args) {
        // Set up the email properties
        Properties props = new Properties();
        props.put("mail.smtp.host", "smtp.example.com");
        props.put("mail.smtp.port", "25");

        // Create a session using the properties
        Session session = Session.getInstance(props);

        try {
            // Create a new email message
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress("sender@example.com"));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse("recipient@example.com"));
            message.setSubject("Test Email");
            message.setText("This is a test email.");

            // Send the email using the Angus Mail implementation
            Transport.send(message);
            System.out.println("Email sent successfully!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
```

In this example, the `MailSender` class uses the Jakarta Mail API to create and send an email message. The Angus Mail implementation is used behind the scenes to handle the actual email sending process, without the need for the application code to know or care about the underlying implementation.

The advantage of this approach is that it provides a standardized and portable way to work with email in Java applications, while allowing different implementations (like Angus Mail) to be used interchangeably.

////

The way the Jakarta Mail API automatically uses the Angus Mail implementation to handle email-related tasks is through the use of the Java Service Provider Interface (SPI) mechanism.

The SPI mechanism allows service providers (in this case, the Angus Mail implementation) to be discovered and loaded dynamically by the Jakarta Mail API implementation.

Here's how it works:

1. **Angus Mail Service Provider Configuration**:
   The Angus Mail implementation includes a service provider configuration file located at `META-INF/services/jakarta.mail.Provider`. This file contains the fully qualified class name of the Angus Mail service provider implementation, which implements the `jakarta.mail.Provider` interface.

2. **Jakarta Mail API Service Loading**:
   When you use the Jakarta Mail API in your application and create a `Session` object, the API will attempt to load all available service providers that implement the `jakarta.mail.Provider` interface.

3. **Automatic Service Provider Discovery**:
   The Jakarta Mail API uses the `ServiceLoader` mechanism to discover and load the available service providers. The `ServiceLoader` will scan the classpath for the `META-INF/services/jakarta.mail.Provider` files and load the implementation classes specified in those files.

4. **Angus Mail Provider Selection**:
   Once the available service providers are loaded, the Jakarta Mail API will select the appropriate provider to use based on the email-related properties (e.g., `mail.smtp.host`, `mail.smtp.port`) configured in the `Session` object.

In the example you provided, when you create the `Session` object and use the Jakarta Mail API to send the email, the API will automatically use the Angus Mail implementation to handle the email-related tasks, such as connecting to the SMTP server and sending the email message.

This process is transparent to the application code, as the Jakarta Mail API handles the service provider discovery and selection, allowing you to use the standard Jakarta Mail API without needing to know the underlying implementation details.

The advantage of this approach is that it allows different service provider implementations (such as Angus Mail) to be used interchangeably, without requiring changes to the application code. This promotes modularity, flexibility, and portability of the Jakarta Mail API-based applications.

saveButton.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            int option = fileChooser.showSaveDialog(frame);
            if (option == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                    textArea.write(writer);
                    JOptionPane.showMessageDialog(frame, "Text saved to " + file.getAbsolutePath(), "Save Successful", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(frame, "Error saving text to file: " + ex.getMessage(), "Save Error", JOptionPane.ERROR_MESSAGE);
                    ex.printStackTrace();
                }
            }
        });
