// Main Spring Boot Application
@SpringBootApplication
public class CustomAnnotationDemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(CustomAnnotationDemoApplication.class, args);
    }
}

// 1. Method-level logging annotation
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@interface LogExecutionTime {
    String value() default "";
}

// 2. Field validation annotation
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)
@Constraint(validatedBy = NotEmptyStringValidator.class)
@interface NotEmptyString {
    String message() default "String cannot be null or empty";
    Class<?>[] groups() default {};
    Class<? extends Payload>[] payload() default {};
}

// 3. Class-level annotation for service marking
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Component
@interface BusinessService {
    String value() default "";
    String description() default "";
}

// 4. Parameter validation annotation
@Target(ElementType.PARAMETER)
@Retention(RetentionPolicy.RUNTIME)
@interface ValidUserId {
}

// Validator for NotEmptyString annotation
public class NotEmptyStringValidator implements ConstraintValidator<NotEmptyString, String> {
    @Override
    public void initialize(NotEmptyString constraintAnnotation) {
    }

    @Override
    public boolean isValid(String value, ConstraintValidatorContext context) {
        return value != null && !value.trim().isEmpty();
    }
}

// Aspect for handling LogExecutionTime annotation
@Aspect
@Component
public class LoggingAspect {
    private static final Logger logger = LoggerFactory.getLogger(LoggingAspect.class);

    @Around("@annotation(logExecutionTime)")
    public Object logExecutionTime(ProceedingJoinPoint joinPoint, LogExecutionTime logExecutionTime) throws Throwable {
        long startTime = System.currentTimeMillis();
        String methodName = joinPoint.getSignature().getName();
        String customMessage = logExecutionTime.value().isEmpty() ? methodName : logExecutionTime.value();
        
        logger.info("Starting execution of: {}", customMessage);
        
        try {
            Object result = joinPoint.proceed();
            long endTime = System.currentTimeMillis();
            logger.info("Completed execution of: {} in {} ms", customMessage, (endTime - startTime));
            return result;
        } catch (Exception e) {
            long endTime = System.currentTimeMillis();
            logger.error("Failed execution of: {} in {} ms. Error: {}", customMessage, (endTime - startTime), e.getMessage());
            throw e;
        }
    }
}

// Aspect for handling ValidUserId annotation
@Aspect
@Component
public class ValidationAspect {
    private static final Logger logger = LoggerFactory.getLogger(ValidationAspect.class);

    @Before("execution(* *.*(..)) && args(@ValidUserId userId, ..)")
    public void validateUserId(JoinPoint joinPoint, Long userId) {
        if (userId == null || userId <= 0) {
            logger.error("Invalid user ID: {}", userId);
            throw new IllegalArgumentException("User ID must be a positive number");
        }
        logger.info("User ID validation passed: {}", userId);
    }
}

// Data model with custom validation
public class User {
    private Long id;
    
    @NotEmptyString(message = "Username cannot be empty")
    private String username;
    
    @NotEmptyString(message = "Email cannot be empty")
    private String email;
    
    // Constructors, getters, and setters
    public User() {}
    
    public User(Long id, String username, String email) {
        this.id = id;
        this.username = username;
        this.email = email;
    }
    
    // Getters and setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    
    @Override
    public String toString() {
        return "User{id=" + id + ", username='" + username + "', email='" + email + "'}";
    }
}

// Service class using custom annotations
@BusinessService(value = "userService", description = "Service for managing user operations")
public class UserService {
    private static final Logger logger = LoggerFactory.getLogger(UserService.class);
    private final Map<Long, User> users = new ConcurrentHashMap<>();
    private final AtomicLong idGenerator = new AtomicLong(1);

    @LogExecutionTime("Creating new user")
    public User createUser(@Valid User user) {
        user.setId(idGenerator.getAndIncrement());
        users.put(user.getId(), user);
        logger.info("Created user: {}", user);
        return user;
    }

    @LogExecutionTime("Fetching user by ID")
    public User getUserById(@ValidUserId Long userId) {
        User user = users.get(userId);
        if (user == null) {
            throw new RuntimeException("User not found with ID: " + userId);
        }
        return user;
    }

    @LogExecutionTime
    public List<User> getAllUsers() {
        return new ArrayList<>(users.values());
    }

    @LogExecutionTime("Updating user")
    public User updateUser(@ValidUserId Long userId, @Valid User updatedUser) {
        if (!users.containsKey(userId)) {
            throw new RuntimeException("User not found with ID: " + userId);
        }
        updatedUser.setId(userId);
        users.put(userId, updatedUser);
        logger.info("Updated user: {}", updatedUser);
        return updatedUser;
    }

    @LogExecutionTime("Deleting user")
    public void deleteUser(@ValidUserId Long userId) {
        User removedUser = users.remove(userId);
        if (removedUser == null) {
            throw new RuntimeException("User not found with ID: " + userId);
        }
        logger.info("Deleted user: {}", removedUser);
    }
}

// REST Controller demonstrating the usage
@RestController
@RequestMapping("/api/users")
@Validated
public class UserController {
    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @PostMapping
    public ResponseEntity<User> createUser(@Valid @RequestBody User user) {
        User createdUser = userService.createUser(user);
        return ResponseEntity.ok(createdUser);
    }

    @GetMapping("/{id}")
    public ResponseEntity<User> getUser(@PathVariable Long id) {
        User user = userService.getUserById(id);
        return ResponseEntity.ok(user);
    }

    @GetMapping
    public ResponseEntity<List<User>> getAllUsers() {
        List<User> users = userService.getAllUsers();
        return ResponseEntity.ok(users);
    }

    @PutMapping("/{id}")
    public ResponseEntity<User> updateUser(@PathVariable Long id, @Valid @RequestBody User user) {
        User updatedUser = userService.updateUser(id, user);
        return ResponseEntity.ok(updatedUser);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
        userService.deleteUser(id);
        return ResponseEntity.noContent().build();
    }
}

// Global exception handler
@ControllerAdvice
public class GlobalExceptionHandler {
    private static final Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<Map<String, String>> handleValidationExceptions(MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach((error) -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            errors.put(fieldName, errorMessage);
        });
        logger.error("Validation errors: {}", errors);
        return ResponseEntity.badRequest().body(errors);
    }

    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<Map<String, String>> handleIllegalArgumentException(IllegalArgumentException ex) {
        Map<String, String> error = new HashMap<>();
        error.put("error", ex.getMessage());
        logger.error("Illegal argument: {}", ex.getMessage());
        return ResponseEntity.badRequest().body(error);
    }

    @ExceptionHandler(RuntimeException.class)
    public ResponseEntity<Map<String, String>> handleRuntimeException(RuntimeException ex) {
        Map<String, String> error = new HashMap<>();
        error.put("error", ex.getMessage());
        logger.error("Runtime error: {}", ex.getMessage());
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(error);
    }
}

// Configuration to scan for custom annotated components
@Configuration
@ComponentScan(
    includeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = BusinessService.class)
)
public class CustomAnnotationConfig {
    
    @Bean
    public MethodValidationPostProcessor methodValidationPostProcessor() {
        return new MethodValidationPostProcessor();
    }
}

// Demo component to test annotations at startup
@Component
public class DemoRunner implements CommandLineRunner {
    private static final Logger logger = LoggerFactory.getLogger(DemoRunner.class);
    private final UserService userService;
    private final ApplicationContext applicationContext;

    public DemoRunner(UserService userService, ApplicationContext applicationContext) {
        this.userService = userService;
        this.applicationContext = applicationContext;
    }

    @Override
    public void run(String... args) throws Exception {
        logger.info("=== Custom Annotation Demo Started ===");
        
        // Demo @BusinessService annotation discovery
        String[] businessServices = applicationContext.getBeanNamesForAnnotation(BusinessService.class);
        logger.info("Found {} beans with @BusinessService annotation:", businessServices.length);
        for (String serviceName : businessServices) {
            Object service = applicationContext.getBean(serviceName);
            BusinessService annotation = service.getClass().getAnnotation(BusinessService.class);
            logger.info("  - {} ({}): {}", serviceName, annotation.value(), annotation.description());
        }

        // Demo custom annotations in action
        try {
            // This will trigger @LogExecutionTime and validation
            User user1 = new User(null, "john_doe", "john@example.com");
            userService.createUser(user1);
            
            User user2 = new User(null, "jane_smith", "jane@example.com");
            userService.createUser(user2);
            
            // This will trigger @ValidUserId validation
            userService.getUserById(1L);
            
            // This will trigger validation error
            try {
                userService.getUserById(-1L);
            } catch (IllegalArgumentException e) {
                logger.info("Expected validation error caught: {}", e.getMessage());
            }
            
        } catch (Exception e) {
            logger.error("Demo error: {}", e.getMessage());
        }
        
        logger.info("=== Custom Annotation Demo Completed ===");
    }
}

/*
=== COMPLETE pom.xml ===

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.0</version>
        <relativePath/>
    </parent>
    
    <groupId>com.example</groupId>
    <artifactId>custom-annotation-demo</artifactId>
    <version>1.0.0</version>
    <name>custom-annotation-demo</name>
    <description>Spring Boot Custom Annotation Demo Application</description>
    
    <properties>
        <java.version>17</java.version>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    
    <dependencies>
        <!-- Spring Boot Web Starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        
        <!-- Spring Boot Validation Starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        
        <!-- Spring Boot AOP Starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        
        <!-- Spring Boot Actuator (Optional - for monitoring) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        
        <!-- Spring Boot DevTools (Optional - for development) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        
        <!-- Spring Boot Test Starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        
        <!-- Additional testing dependencies -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-testcontainers</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
    
    <build>
        <plugins>
            <!-- Spring Boot Maven Plugin -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.springframework.boot</groupId>
                            <artifactId>spring-boot-devtools</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
            
            <!-- Maven Compiler Plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                    <encoding>UTF-8</encoding>
                </configuration>
            </plugin>
            
            <!-- Maven Surefire Plugin for running tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.1.2</version>
            </plugin>
        </plugins>
    </build>
    
    <!-- Optional: Add repositories if needed -->
    <repositories>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
    </repositories>
    
    <pluginRepositories>
        <pluginRepository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </pluginRepository>
    </pluginRepositories>
</project>

=== APPLICATION.PROPERTIES ===

# Server configuration
server.port=8080
server.servlet.context-path=/

# Logging configuration
logging.level.com.example=INFO
logging.level.org.springframework.web=DEBUG
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

# Actuator endpoints (optional)
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized

# Application info
info.app.name=Custom Annotation Demo
info.app.description=Spring Boot application demonstrating custom annotations
info.app.version=1.0.0

=== Required imports (add these at the top of the Java file): ===

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.context.annotation.*;
import org.springframework.validation.annotation.Validated;
import org.springframework.validation.MethodValidationPostProcessor;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.ApplicationContext;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.aspectj.lang.annotation.*;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.JoinPoint;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import jakarta.validation.*;
import jakarta.validation.constraints.*;
import java.lang.annotation.*;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

=== HOW TO RUN ===

1. Create a new directory for your project
2. Save the pom.xml file
3. Create the following directory structure:
   src/main/java/com/example/customannotationdemo/
4. Split the Java code into separate files:
   - CustomAnnotationDemoApplication.java (main class)
   - User.java (model)
   - UserService.java (service)
   - UserController.java (controller)
   - LoggingAspect.java (aspect)
   - ValidationAspect.java (aspect)
   - GlobalExceptionHandler.java (exception handler)
   - CustomAnnotationConfig.java (configuration)
   - DemoRunner.java (demo runner)
   - Custom annotation classes
5. Create src/main/resources/application.properties
6. Run: mvn clean install
7. Run: mvn spring-boot:run

*/
